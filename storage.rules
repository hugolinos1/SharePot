
rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o { // Match the default bucket

    // Default rule: deny all reads and writes if no other rules match
    match /{allPaths=**} {
      allow read, write: if false;
    }

    // Rules for expense receipts
    // Path structure: receipts/{projectId}/{expenseId}/{fileName}
    // - projectId: ID of the project the expense belongs to
    // - expenseId: ID of the expense document
    // - fileName: The name of the uploaded file
    match /receipts/{projectId}/{expenseId}/{fileName} {

      // Allow CREATE (upload) if:
      // 1. User is authenticated.
      // 2. Uploaded file is an image and less than 5MB.
      // 3. User is a participant (member or owner) of the project.
      // 4. The expense document exists and belongs to the specified project.
      allow create: if request.auth != null &&
                       request.resource.size < 5 * 1024 * 1024 &&  // Max 5MB
                       request.resource.contentType.matches('image/.*') && // Must be an image
                       // Check Firestore to verify project participation
                       exists(/databases/(default)/documents/projects/$(projectId)) &&
                       (
                         request.auth.uid == get(/databases/(default)/documents/projects/$(projectId)).data.ownerId ||
                         request.auth.uid in get(/databases/(default)/documents/projects/$(projectId)).data.members
                       ) &&
                       // Check Firestore to verify the expense exists and belongs to the project
                       exists(/databases/(default)/documents/expenses/$(expenseId)) &&
                       get(/databases/(default)/documents/expenses/$(expenseId)).data.projectId == projectId;

      // Allow READ if:
      // 1. User is authenticated.
      // 2. User is a participant (member or owner) of the project.
      allow read: if request.auth != null &&
                     exists(/databases/(default)/documents/projects/$(projectId)) &&
                     (
                       request.auth.uid == get(/databases/(default)/documents/projects/$(projectId)).data.ownerId ||
                       request.auth.uid in get(/databases/(default)/documents/projects/$(projectId)).data.members
                     );

      // Allow DELETE if:
      // 1. User is authenticated.
      // 2. User is the one who created the expense entry (owns the expense data).
      // 3. OR User is the owner of the project.
      allow delete: if request.auth != null &&
                       exists(/databases/(default)/documents/expenses/$(expenseId)) &&
                       (
                         request.auth.uid == get(/databases/(default)/documents/expenses/$(expenseId)).data.createdBy ||
                         (
                           exists(/databases/(default)/documents/projects/$(projectId)) &&
                           request.auth.uid == get(/databases/(default)/documents/projects/$(projectId)).data.ownerId
                         )
                       );

      // Disallow direct updates to files; typically handled by delete then create.
      allow update: if false;
    }

    // Optional: Rules for user profile pictures
    // Path structure: profilePictures/{userId}/{fileName}
    match /profilePictures/{userId}/{fileName} {
      // Allow anyone to read profile pictures (if they are public)
      // Or restrict to authenticated users: if request.auth != null;
      allow read: if true;

      // Allow a user to write (upload/update/delete) their OWN profile picture.
      // Limit file size and type.
      allow write: if request.auth != null &&
                      request.auth.uid == userId &&
                      request.resource.size < 2 * 1024 * 1024 && // Max 2MB
                      request.resource.contentType.matches('image/.*'); // Must be an image
    }
  }
}
