
rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {

    // Helper function to check if the user is a participant (member or owner) of a project
    // This function reads data from Firestore.
    function isProjectParticipant(projectId) {
      let projectPath = /databases/$(database)/documents/projects/$(projectId);
      // Ensure the project document exists and the user is authenticated
      return request.auth != null && exists(projectPath) &&
             (
               request.auth.uid == get(projectPath).data.ownerId ||
               request.auth.uid in get(projectPath).data.members
             );
    }

    // Rules for receipt files, organized by projectId, then expenseId
    match /receipts/{projectId}/{expenseId}/{fileName} {

      // Allow create (upload) if:
      // 1. User is authenticated.
      // 2. File is an image.
      // 3. File size is less than 5MB.
      // 4. User is a participant (owner or member) of the project.
      allow create: if request.auth != null &&
                       request.resource.size < 5 * 1024 * 1024 &&
                       request.resource.contentType.matches('image/.*') &&
                       isProjectParticipant(projectId);

      // Allow read if:
      // 1. User is authenticated.
      // 2. User is a participant (owner or member) of the project.
      allow read: if request.auth != null && isProjectParticipant(projectId);

      // Allow delete if:
      // 1. User is authenticated.
      // 2. The corresponding expense document exists in Firestore and belongs to the project.
      // 3. User is the creator of the expense OR the owner of the project.
      allow delete: if request.auth != null &&
                       exists(/databases/$(database)/documents/expenses/$(expenseId)) &&
                       get(/databases/$(database)/documents/expenses/$(expenseId)).data.projectId == projectId &&
                       (
                         request.auth.uid == get(/databases/$(database)/documents/expenses/$(expenseId)).data.createdBy ||
                         (
                           exists(/databases/$(database)/documents/projects/$(projectId)) &&
                           request.auth.uid == get(/databases/$(database)/documents/projects/$(projectId)).data.ownerId
                         )
                       );
      // Update is typically handled as delete then create by the client.
      // If direct update is needed, rules would be similar to create/delete.
      allow update: if false;
    }

    // Example for user profile pictures, if you add this feature later
    // match /user-avatars/{userId}/{fileName} {
    //   allow read: if true; // Publicly readable or based on your app's logic
    //   allow write: if request.auth != null && request.auth.uid == userId &&
    //                   request.resource.size < 1 * 1024 * 1024 &&
    //                   request.resource.contentType.matches('image/.*');
    // }

    // Default deny all other paths (optional, but good practice for security)
    // match /{allPaths=**} {
    //  allow read, write: if false;
    // }
  }
}
