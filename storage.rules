
rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {

    // Helper function to check if the user is a participant (member or owner) of a project
    // This function reads from Firestore.
    function isProjectParticipant(projectId) {
      let projectPath = /databases/$(database)/documents/projects/$(projectId);
      // Ensure the project document exists and the user is either the owner or in the members list.
      return exists(projectPath) &&
             (
               request.auth.uid == get(projectPath).data.ownerId ||
               (get(projectPath).data.members != null && request.auth.uid in get(projectPath).data.members)
             );
    }

    // Rules for receipt files
    // Path: receipts/{projectId}/{expenseId}/{fileName}
    match /receipts/{projectId}/{expenseId}/{fileName} {
      // Allow CREATE (upload) if:
      // 1. User is authenticated.
      // 2. File is an image and size is less than 5MB.
      // 3. User is a participant (owner or member) of the project.
      allow create: if request.auth != null &&
                       request.resource.size < 5 * 1024 * 1024 &&
                       request.resource.contentType.matches('image/.*') &&
                       isProjectParticipant(projectId);

      // Allow READ if:
      // 1. User is authenticated.
      // 2. User is a participant (owner or member) of the project.
      allow read: if request.auth != null && isProjectParticipant(projectId);

      // Allow DELETE if:
      // 1. User is authenticated.
      // 2. The corresponding expense document exists in Firestore and belongs to this project.
      // 3. The user is either the creator of the expense OR the owner of the project.
      allow delete: if request.auth != null &&
                       exists(/databases/$(database)/documents/expenses/$(expenseId)) &&
                       get(/databases/$(database)/documents/expenses/$(expenseId)).data.projectId == projectId &&
                       (
                         request.auth.uid == get(/databases/$(database)/documents/expenses/$(expenseId)).data.createdBy ||
                         (
                           exists(/databases/$(database)/documents/projects/$(projectId)) &&
                           request.auth.uid == get(/databases/$(database)/documents/projects/$(projectId)).data.ownerId
                         )
                       );
      // Note: Updates are typically handled as delete old then create new.
      // If you need specific update rules, they can be added.
    }

    // Example rules for user profile pictures (if you implement this feature later)
    // Path: user-avatars/{userId}/{fileName}
    // match /user-avatars/{userId}/{fileName} {
    //   // Allow CREATE (upload) if user is authenticated and uploading their own avatar.
    //   allow create: if request.auth != null && request.auth.uid == userId &&
    //                    request.resource.size < 2 * 1024 * 1024 && // e.g., 2MB limit
    //                    request.resource.contentType.matches('image/.*');

    //   // Allow READ by anyone (public profile pictures).
    //   allow read;

    //   // Allow DELETE if user is authenticated and deleting their own avatar.
    //   allow delete: if request.auth != null && request.auth.uid == userId;
    // }
  }
}
