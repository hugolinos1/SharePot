
rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {

    // Règles pour le chemin des justificatifs
    // receipts/{projectId}/{expenseId}/{fileName}
    match /receipts/{projectId}/{expenseId}/{fileName} {
      allow create: if request.auth != null &&
                       request.resource.size < 5 * 1024 * 1024 && // Max 5MB
                       request.resource.contentType.matches('image/.*') && // Seules les images sont autorisées
                       // L'utilisateur doit être propriétaire ou membre du projet
                       (exists(/databases/$(database)/documents/projects/$(projectId)) &&
                         (request.auth.uid == get(/databases/$(database)/documents/projects/$(projectId)).data.ownerId ||
                          request.auth.uid in get(/databases/$(database)/documents/projects/$(projectId)).data.members)
                       );

      allow read: if request.auth != null &&
                     // L'utilisateur doit être propriétaire ou membre du projet pour lire
                     (exists(/databases/$(database)/documents/projects/$(projectId)) &&
                       (request.auth.uid == get(/databases/$(database)/documents/projects/$(projectId)).data.ownerId ||
                        request.auth.uid in get(/databases/$(database)/documents/projects/$(projectId)).data.members)
                     );

      allow delete: if request.auth != null &&
                       // L'utilisateur doit être le créateur de la dépense OU le propriétaire du projet pour supprimer
                       (
                         exists(/databases/$(database)/documents/expenses/$(expenseId)) &&
                         get(/databases/$(database)/documents/expenses/$(expenseId)).data.projectId == projectId && // Vérifie que la dépense appartient bien au projet
                         (
                           request.auth.uid == get(/databases/$(database)/documents/expenses/$(expenseId)).data.createdBy ||
                           (
                             exists(/databases/$(database)/documents/projects/$(projectId)) &&
                             request.auth.uid == get(/databases/$(database)/documents/projects/$(projectId)).data.ownerId
                           )
                         )
                       );
      // Pas de règle "update" explicite pour les fichiers, une mise à jour est généralement une suppression puis une nouvelle création.
    }

    // Optionnel : Règles pour les avatars utilisateurs si vous implémentez cette fonctionnalité
    // avatars/{userId}/{fileName}
    match /avatars/{userId}/{fileName} {
      allow create: if request.auth != null &&
                       request.auth.uid == userId && // L'utilisateur ne peut téléverser que son propre avatar
                       request.resource.size < 1 * 1024 * 1024 && // Max 1MB
                       request.resource.contentType.matches('image/.*');

      allow read: if true; // Les avatars sont souvent publics

      allow delete: if request.auth != null && request.auth.uid == userId;
    }

    // Règle par défaut plus restrictive pour tous les autres chemins non spécifiés
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}
