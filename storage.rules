
rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {

    // Helper function to check if the user is a participant (member or owner) of a project
    // It expects projectId as a string argument.
    function isProjectParticipant(projectId) {
      let projectDocumentPath = /databases/$(database)/documents/projects/$(projectId);
      // Ensure the project document exists before trying to access its data
      return exists(projectDocumentPath) &&
             (
               request.auth.uid == get(projectDocumentPath).data.ownerId ||
               (request.auth.uid in get(projectDocumentPath).data.members)
             );
    }

    // Rules for user profile pictures (example, if you implement this later)
    // Path: /user-avatars/{userId}/{fileName}
    match /user-avatars/{userId}/{fileName} {
      allow read: if true; // Or if request.auth != null; for authenticated users only
      allow write: if request.auth != null && request.auth.uid == userId &&
                      request.resource.size < 1 * 1024 * 1024 && // Max 1MB
                      request.resource.contentType.matches('image/.*');
    }

    // Rules for expense receipts
    // Path: receipts/{projectId}/{expenseId}/{fileName}
    match /receipts/{projectId}/{expenseId}/{fileName} {
      // Allow create (upload) if:
      // 1. User is authenticated.
      // 2. File is an image and less than 5MB.
      // 3. User is a participant (owner or member) of the project.
      allow create: if request.auth != null &&
                       request.resource.size < 5 * 1024 * 1024 &&
                       request.resource.contentType.matches('image/.*') &&
                       isProjectParticipant(projectId);

      // Allow read if:
      // 1. User is authenticated.
      // 2. User is a participant (owner or member) of the project.
      allow read: if request.auth != null && isProjectParticipant(projectId);

      // Allow delete if:
      // 1. User is authenticated.
      // 2. The corresponding expense document exists in Firestore and belongs to the project.
      // 3. The user is either the creator of the expense OR the owner of the project.
      allow delete: if request.auth != null &&
                       exists(/databases/$(database)/documents/expenses/$(expenseId)) &&
                       get(/databases/$(database)/documents/expenses/$(expenseId)).data.projectId == projectId &&
                       (
                         request.auth.uid == get(/databases/$(database)/documents/expenses/$(expenseId)).data.createdBy ||
                         ( // Or if the user is the project owner
                           exists(/databases/$(database)/documents/projects/$(projectId)) &&
                           request.auth.uid == get(/databases/$(database)/documents/projects/$(projectId)).data.ownerId
                         )
                       );
      // Updates are typically handled as delete then create.
      // allow update: if false; // Or define specific update rules if needed
    }

    // Fallback rule: Deny all other accesses by default
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}
