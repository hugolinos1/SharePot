
rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {

    // Helper function to check if the user is an admin
    function isAdmin() {
      // Ensure request.auth and request.auth.token are not null before accessing email
      return request.auth != null &&
             request.auth.token != null &&
             request.auth.token.email == 'hugues.rabier@gmail.com';
    }

    // Helper function to check if the user is a participant (member or owner) of a project
    // This function reads from Firestore.
    function isProjectParticipant(projectId) {
      let projectPath = /databases/$(database)/documents/projects/$(projectId);
      // Ensure the project document exists and its data is not null before accessing fields.
      return exists(projectPath) &&
             get(projectPath).data != null &&
             (
               request.auth.uid == get(projectPath).data.ownerId ||
               (
                 get(projectPath).data.members != null &&
                 get(projectPath).data.members is list && // Ensure 'members' is a list
                 request.auth.uid in get(projectPath).data.members
               )
             );
    }

    // Rules for receipt images
    // Path: receipts/{projectId}/{expenseId}/{fileName}
    match /receipts/{projectId}/{expenseId}/{fileName} {
      // Allow create (upload) if:
      // 1. User is authenticated.
      // 2. File is an image and under 5MB.
      // 3. User is a participant of the project.
      allow create: if request.auth != null &&
                       request.resource.size < 5 * 1024 * 1024 &&
                       request.resource.contentType.matches('image/.*') &&
                       isProjectParticipant(projectId);

      // Allow read if user is a participant of the project.
      allow read: if request.auth != null && isProjectParticipant(projectId);

      // Allow delete if:
      // 1. User is authenticated.
      // 2. The corresponding expense document exists and belongs to the project.
      // 3. User is the creator of the expense OR the owner of the project.
      allow delete: if request.auth != null &&
                       exists(/databases/$(database)/documents/expenses/$(expenseId)) &&
                       get(/databases/$(database)/documents/expenses/$(expenseId)).data.projectId == projectId &&
                       (
                         request.auth.uid == get(/databases/$(database)/documents/expenses/$(expenseId)).data.createdBy ||
                         (
                           exists(/databases/$(database)/documents/projects/$(projectId)) &&
                           get(/databases/$(database)/documents/projects/$(projectId)).data != null &&
                           request.auth.uid == get(/databases/$(database)/documents/projects/$(projectId)).data.ownerId
                         )
                       );
      // Updates are generally handled as delete then create new.
      allow update: if false;
    }

    // Rules for user avatars
    // Path: avatars/{userId}/{fileName}
    match /avatars/{userId}/{fileName} {
      // Allow anyone to read avatars (they are often public).
      allow read: if true;

      // Allow write (upload/update) if:
      // 1. User is authenticated.
      // 2. The authenticated user's UID matches the {userId} in the path.
      // 3. File is an image and under 2MB.
      allow write: if request.auth != null &&
                      request.auth.uid == userId &&
                      request.resource.size < 2 * 1024 * 1024 &&
                      request.resource.contentType.matches('image/.*');

      // Allow delete if:
      // 1. User is authenticated.
      // 2. The authenticated user's UID matches the {userId} in the path.
      allow delete: if request.auth != null && request.auth.uid == userId;
    }

    // Default rule: Deny all other operations on all other paths.
    // This is important for security. Only explicitly allowed paths/operations are permitted.
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}
