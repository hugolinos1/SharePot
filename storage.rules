rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {

    // Rules for user avatars
    match /avatars/{userId}/{fileName} {
      allow read: if true; // Avatars are generally public

      // TEMPORARY DIAGNOSTIC RULE: Simplify to check only auth and UID match
      allow write: if request.auth != null && request.auth.uid == userId;

      allow delete: if request.auth.uid == userId;
    }

    // Rules for receipt images
    match /receipts/{projectId}/{expenseId}/{fileName} {
      // Helper function to check if the user is a participant (member or owner) of a project
      // This function makes calls to Firestore, ensure your Firestore rules allow these reads
      // by the `service firebase.storage` service account implicitly, or by the authenticated user.
      function isProjectParticipant(localProjectId) {
        let projectPath = /databases/$(database)/documents/projects/$(localProjectId);
        return exists(projectPath) &&
               (
                 request.auth.uid == get(projectPath).data.ownerId ||
                 (get(projectPath).data.members != null && request.auth.uid in get(projectPath).data.members)
               );
      }

      allow create: if request.auth != null &&
                       request.resource.size < 5 * 1024 * 1024 && // Max 5MB
                       request.resource.contentType.matches('image/.*') &&
                       isProjectParticipant(projectId); // Validate that the user is part of the project

      allow read: if request.auth != null && isProjectParticipant(projectId);

      allow delete: if request.auth != null &&
                       exists(/databases/$(database)/documents/expenses/$(expenseId)) &&
                       get(/databases/$(database)/documents/expenses/$(expenseId)).data.projectId == projectId && // Expense belongs to this project
                       (
                         request.auth.uid == get(/databases/$(database)/documents/expenses/$(expenseId)).data.createdBy || // User created the expense
                         ( // Or user is the project owner
                           exists(/databases/$(database)/documents/projects/$(projectId)) &&
                           request.auth.uid == get(/databases/$(database)/documents/projects/$(projectId)).data.ownerId
                         )
                       );
    }

    // Deny all other paths by default
    // match /{allPaths=**} {
    //   allow read, write: if false;
    // }
  }
}
