
rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {

    // Règles pour les justificatifs de dépenses sont commentées car la fonctionnalité est supprimée
    /*
    match /receipts/{projectId}/{expenseId}/{fileName} {
      allow create: if request.auth != null &&
                       request.resource.size < 5 * 1024 * 1024 &&
                       request.resource.contentType.matches('image/.*') &&
                       (
                         exists(/databases/$(database)/documents/projects/$(projectId)) &&
                         (
                           request.auth.uid == get(/databases/$(database)/documents/projects/$(projectId)).data.ownerId ||
                           request.auth.uid in get(/databases/$(database)/documents/projects/$(projectId)).data.members
                         )
                       );

      allow read: if request.auth != null &&
                     (
                       exists(/databases/$(database)/documents/projects/$(projectId)) &&
                       (
                         request.auth.uid == get(/databases/$(database)/documents/projects/$(projectId)).data.ownerId ||
                         request.auth.uid in get(/databases/$(database)/documents/projects/$(projectId)).data.members
                       )
                     );

      allow delete: if request.auth != null &&
                       exists(/databases/$(database)/documents/expenses/$(expenseId)) &&
                       get(/databases/$(database)/documents/expenses/$(expenseId)).data.projectId == projectId &&
                       (
                         request.auth.uid == get(/databases/$(database)/documents/expenses/$(expenseId)).data.createdBy ||
                         (
                           exists(/databases/$(database)/documents/projects/$(projectId)) &&
                           request.auth.uid == get(/databases/$(database)/documents/projects/$(projectId)).data.ownerId
                         )
                       );
      allow update: if false;
    }
    */

    // Règles pour les avatars des utilisateurs
    match /avatars/{userId}/{fileName} {
      allow read: if true; // Avatars are public

      allow write: if request.auth != null &&
                      request.auth.uid == userId &&
                      request.resource.size < 2 * 1024 * 1024 && // Max 2MB
                      request.resource.contentType.matches('image/.*');

      allow delete: if request.auth != null && request.auth.uid == userId;
    }

    // Règle par défaut : refuser toutes les autres opérations sur tous les autres chemins.
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}
