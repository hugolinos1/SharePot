
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is an admin
    function isAdmin() {
      return request.auth != null && request.auth.token.email == 'hugues.rabier@gmail.com';
    }

    // Helper function to check if the user is a participant (member or owner) of a project
    function isProjectParticipant(projectId) {
      let projectDocPath = /databases/$(database)/documents/projects/$(projectId);
      if (!exists(projectDocPath)) {
        return false;
      }
      let projectData = get(projectDocPath).data;
      return request.auth != null && // User must be authenticated
             projectData != null &&  // Project data must exist
             (
               request.auth.uid == projectData.ownerId || // User is the owner
               (projectData.members != null && projectData.members is list && request.auth.uid in projectData.members) // User is in the members list
             );
    }

    match /users/{userId} {
      // ANY authenticated user can create their OWN user document, ensuring the doc ID matches their UID
      allow create: if request.auth != null &&
                       request.resource.data.id == request.auth.uid &&
                       request.resource.data.email == request.auth.token.email && // Ensure email matches token
                       // Ensure isAdmin is false unless it's the designated admin email during initial creation
                       (request.resource.data.isAdmin == false || (request.resource.data.isAdmin == true && request.auth.token.email == 'hugues.rabier@gmail.com'));


      // Any authenticated user can read any user profile (needed for member lists, etc.)
      allow read: if request.auth != null;

      // Admin can update any user document.
      // A user can update their OWN user document (specific fields like name, avatarUrl, avatarStoragePath).
      // Ensure that isAdmin field cannot be changed by non-admins or to true by non-admins.
      allow update: if request.auth != null && (
                       isAdmin() ||
                       (
                         request.auth.uid == userId &&
                         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['name', 'avatarUrl', 'avatarStoragePath']) &&
                         // Prevent non-admin from setting isAdmin to true, or admin from unsetting their own isAdmin if it's already true
                         (request.resource.data.isAdmin == resource.data.isAdmin || (request.resource.data.isAdmin == false && resource.data.isAdmin == true))
                       )
                     );

      // Admin can delete any user document. (Be cautious with this rule in production)
      // Users cannot delete their own documents through this rule for now.
      allow delete: if isAdmin() && request.auth.uid != userId; // Admin cannot delete self through this rule

      // Admin can list all users.
      allow list: if isAdmin();
    }

    match /projects/{projectId} {
      // ANY authenticated user can create a project.
      // The creator (request.auth.uid) MUST be the ownerId and a member.
      // Required fields: name, ownerId, members, status, createdAt, updatedAt, lastActivity.
      allow create: if request.auth != null &&
                       request.resource.data.ownerId == request.auth.uid &&
                       request.auth.uid in request.resource.data.members &&
                       request.resource.data.name is string && request.resource.data.name.size() > 0 &&
                       request.resource.data.status is string &&
                       request.resource.data.createdAt == request.time &&
                       request.resource.data.updatedAt == request.time &&
                       request.resource.data.lastActivity == request.time;

      // Admin can read any project.
      // A user can read a project if they are an owner or a member.
      allow read: if isAdmin() || isProjectParticipant(projectId);

      // Complex update logic
      allow update: if request.auth != null && (
        // Case 1: Admin can update anything (respecting immutable fields if any)
        isAdmin() ||
        // Case 2: Owner can update fields (except ownerId and createdAt)
        (
          request.auth.uid == resource.data.ownerId &&
          request.resource.data.updatedAt == request.time &&
          // Owner cannot change ownerId or createdAt
          request.resource.data.ownerId == resource.data.ownerId &&
          request.resource.data.createdAt == resource.data.createdAt
          // All other fields are updatable by the owner
        ) ||
        // Case 3: A newly invited and authenticated user (not owner, not already member)
        // can ONLY add themselves to the members array and update 'updatedAt'.
        // This relies on the client sending { members: arrayUnion(request.auth.uid), updatedAt: serverTimestamp() }
        (
          request.auth.uid != resource.data.ownerId && // Must not be the owner
          (resource.data.members == null || !(request.auth.uid in resource.data.members)) && // User is not already a member or members list is null
          // Ensure the update request *only* contains 'members' and 'updatedAt' in its top-level keys.
          // This means if the client sends other fields (even unchanged), it will be denied by this clause.
          request.resource.data.keys().hasOnly(['members', 'updatedAt']) &&
          request.resource.data.updatedAt == request.time
          // The actual content of arrayUnion is hard to verify securely here,
          // so we rely on client sending the correct user's UID and hasOnly check.
        ) ||
        // Case 4: A project participant (not owner) can update only expense-related tracking fields.
        (
          isProjectParticipant(projectId) &&
          request.auth.uid != resource.data.ownerId && // Not the owner
          request.resource.data.updatedAt == request.time &&
          request.resource.data.lastActivity == request.time &&
          // Ensures that NO OTHER critical fields are being changed by the participant during this operation.
          // This means if the client tries to send 'name', 'description', etc., this rule part will fail.
          !request.resource.data.keys().hasAny(['name', 'description', 'status', 'budget', 'ownerId', 'createdAt', 'members', 'tags', 'notes'])
          // totalExpenses and recentExpenses are allowed to be changed by not being in the hasAny list.
        )
      );


      // Admin can delete any project.
      // The project owner can delete the project.
      allow delete: if isAdmin() || (request.auth.uid == resource.data.ownerId);

      // Authenticated users can list projects. Client-side queries must filter appropriately.
      allow list: if request.auth != null;
    }

    match /expenses/{expenseId} {
      // User can create an expense if they are a participant of the linked project.
      // Required fields: amount, currency, projectId, paidById, expenseDate, createdBy.
      allow create: if request.auth != null &&
                       isProjectParticipant(request.resource.data.projectId) &&
                       request.resource.data.amount is number &&
                       request.resource.data.currency is string &&
                       request.resource.data.projectId is string &&
                       request.resource.data.paidById is string &&
                       request.resource.data.expenseDate is timestamp &&
                       request.resource.data.createdBy == request.auth.uid &&
                       request.resource.data.createdAt == request.time &&
                       request.resource.data.updatedAt == request.time; // Add updatedAt for creation as well

      // Admin can read any expense.
      // A user can read an expense if they are a participant of the linked project.
      allow read: if isAdmin() || isProjectParticipant(resource.data.projectId);

      // Admin can update any expense.
      // A user can update an expense if they created it AND are a participant of the linked project.
      // Ensure updatedAt is correctly set.
      allow update: if request.auth != null && (
                        isAdmin() ||
                        (
                          isProjectParticipant(resource.data.projectId) &&
                          request.auth.uid == resource.data.createdBy &&
                          request.resource.data.updatedAt == request.time &&
                          request.resource.data.createdBy == resource.data.createdBy && // Cannot change creator
                          request.resource.data.projectId == resource.data.projectId    // Cannot change project
                        )
                      );

      // Admin can delete any expense.
      // A user can delete an expense if they created it AND are a participant of the linked project.
      allow delete: if request.auth != null && (
                        isAdmin() ||
                        (isProjectParticipant(resource.data.projectId) && request.auth.uid == resource.data.createdBy)
                      );

      // Authenticated users can list expenses. Client-side queries must filter.
      allow list: if request.auth != null;
    }
  }
}
