
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is an admin
    function isAdmin() {
      return request.auth.token.email == 'hugues.rabier@gmail.com';
    }

    // Helper function to check if the user is a participant (member or owner) of a project
    // This is used by Firestore rules for expenses and project reads
    function isProjectParticipant(projectId) {
      let projectDoc = get(/databases/$(database)/documents/projects/$(projectId));
      return projectDoc.data.ownerId == request.auth.uid || request.auth.uid in projectDoc.data.members;
    }

    match /users/{userId} {
      // ANY authenticated user can create their OWN user document, ensuring the doc ID matches their UID
      allow create: if request.auth != null && request.resource.data.id == request.auth.uid;

      // ANY authenticated user can read ANY user document.
      // The application logic should handle displaying only relevant profiles (e.g., project members).
      allow read: if request.auth != null;

      // Admin can update any user document.
      // A user can update their OWN user document specific fields.
      // Ensure that isAdmin field cannot be changed by non-admins.
      allow update: if request.auth != null && (
                      isAdmin() ||
                       (request.auth.uid == userId &&
                        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['name', 'avatarUrl', 'avatarStoragePath']) &&
                        // Prevent self-promotion to admin or changing admin status by non-admins
                        (
                         !request.resource.data.keys().has('isAdmin') ||
                         (request.resource.data.isAdmin == resource.data.isAdmin)
                        )
                       )
                    );

      // Admin can delete any user document. (Be cautious with this rule in production)
      allow delete: if isAdmin();

      // Admin can list all users. Non-admins cannot (client must fetch specific profiles).
      allow list: if isAdmin();
    }

    match /projects/{projectId} {
      // ANY authenticated user can create a project.
      // The creator (request.auth.uid) MUST be the ownerId and a member.
      // Required fields: name, ownerId, members, status, createdAt, updatedAt, lastActivity.
      allow create: if request.auth != null &&
                       request.resource.data.ownerId == request.auth.uid &&
                       request.auth.uid in request.resource.data.members &&
                       request.resource.data.name is string && request.resource.data.name.size() > 0 &&
                       request.resource.data.status is string &&
                       request.resource.data.createdAt == request.time &&
                       request.resource.data.updatedAt == request.time &&
                       request.resource.data.lastActivity == request.time;

      // Admin can read any project.
      // A user can read a project if they are an owner or a member.
      allow read: if request.auth != null && (isAdmin() || isProjectParticipant(projectId));

      allow update: if request.auth != null && (
        // Admin can update anything
        isAdmin() ||
        // Owner can update most fields (except critical ones like ownerId or createdAt)
        (
          request.auth.uid == resource.data.ownerId &&
          request.resource.data.updatedAt == request.time &&
          (!request.resource.data.keys().has('ownerId') || request.resource.data.ownerId == resource.data.ownerId) &&
          (!request.resource.data.keys().has('createdAt') || request.resource.data.createdAt == resource.data.createdAt)
        ) ||
        // Authenticated user (invited) can add themselves to the members array
        (
          request.resource.data.keys().hasOnly(['members', 'updatedAt']) && // Only these fields can be changed by this specific rule
          request.resource.data.members == resource.data.members.concat([request.auth.uid]) && // The new members array is the old one + the current user
          !(request.auth.uid in resource.data.members) && // The user is not already a member
          request.resource.data.updatedAt == request.time
        )
      );

      // Admin can delete any project.
      // The project owner can delete the project.
      allow delete: if request.auth != null && (isAdmin() || (request.auth.uid == resource.data.ownerId));

      // Authenticated users can list projects. Client-side queries must filter appropriately.
      allow list: if request.auth != null;
    }

    match /expenses/{expenseId} {
      // User can create an expense if they are a participant of the linked project.
      // Required fields: amount, currency, projectId, paidById, expenseDate, createdBy.
      allow create: if request.auth != null &&
                       isProjectParticipant(request.resource.data.projectId) &&
                       request.resource.data.amount is number &&
                       request.resource.data.currency is string &&
                       request.resource.data.projectId is string &&
                       request.resource.data.paidById is string &&
                       request.resource.data.expenseDate is timestamp &&
                       request.resource.data.createdBy == request.auth.uid &&
                       request.resource.data.createdAt == request.time;

      // Admin can read any expense.
      // A user can read an expense if they are a participant of the linked project.
      allow read: if request.auth != null && (isAdmin() || isProjectParticipant(resource.data.projectId));

      // Admin can update any expense.
      // A user can update an expense if they created it AND are a participant of the linked project.
      // The project ID of the expense cannot be changed.
      allow update: if request.auth != null &&
                       isProjectParticipant(resource.data.projectId) &&
                       request.resource.data.projectId == resource.data.projectId &&
                       (
                         isAdmin() ||
                         request.auth.uid == resource.data.createdBy
                       );

      // Admin can delete any expense.
      // A user can delete an expense if they created it AND are a participant of the linked project.
      allow delete: if request.auth != null &&
                       isProjectParticipant(resource.data.projectId) &&
                       (
                         isAdmin() ||
                         request.auth.uid == resource.data.createdBy
                       );

      // Authenticated users can list expenses. Client-side queries must filter.
      allow list: if request.auth != null;
    }
  }
}
