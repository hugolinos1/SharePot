
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is an admin
    function isAdmin() {
      return request.auth.token.email == 'hugues.rabier@gmail.com';
    }

    // Helper function to check if the user is a participant (member or owner) of a project
    function isProjectParticipant(projectId) {
      let projectPath = /databases/$(database)/documents/projects/$(projectId);
      return exists(projectPath) &&
             projectPath.data != null && 
             (
               request.auth.uid == projectPath.data.ownerId ||
               (projectPath.data.members != null && projectPath.data.members is list && request.auth.uid in projectPath.data.members)
             );
    }

    match /users/{userId} {
      // ANY authenticated user can create their OWN user document, ensuring the doc ID matches their UID
      // and includes required fields like id, email, isAdmin, createdAt.
      allow create: if request.auth != null &&
                       request.resource.data.id == request.auth.uid &&
                       request.resource.data.email == request.auth.token.email &&
                       request.resource.data.isAdmin is bool &&
                       request.resource.data.createdAt == request.time;

      // Admin can read any user document.
      // ANY authenticated user can read ANY user document.
      // The application logic should handle displaying only relevant profiles (e.g., project members).
      allow read: if request.auth != null;

      // Admin can update any user document.
      // A user can update their OWN user document for specific fields (name, avatarUrl, avatarStoragePath).
      // Ensure that isAdmin field cannot be changed by non-admins to true.
      allow update: if request.auth != null && (
                      isAdmin() ||
                      (
                        request.auth.uid == userId &&
                        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['name', 'avatarUrl', 'avatarStoragePath']) &&
                        // Prevent self-promotion to admin if not already admin
                        (resource.data.isAdmin == true || request.resource.data.isAdmin == false)
                      )
                    );

      // Admin can delete any user document. (Be cautious with this rule in production)
      // A user cannot delete their own document through this rule directly.
      allow delete: if isAdmin() && request.auth.uid != userId;

      // Admin can list all users.
      // Non-admins can list users (e.g., for adding to projects). Client must filter appropriately.
      allow list: if request.auth != null;
    }

    match /projects/{projectId} {
      // ANY authenticated user can create a project.
      // The creator (request.auth.uid) MUST be the ownerId and a member.
      // Required fields: name, ownerId, members, status, createdAt, updatedAt, lastActivity.
      allow create: if request.auth != null &&
                       request.resource.data.ownerId == request.auth.uid &&
                       request.auth.uid in request.resource.data.members &&
                       request.resource.data.name is string && request.resource.data.name.size() > 0 &&
                       request.resource.data.status is string &&
                       request.resource.data.createdAt == request.time &&
                       request.resource.data.updatedAt == request.time &&
                       request.resource.data.lastActivity == request.time;

      // Admin can read any project.
      // A user can read a project if they are an owner or a member.
      allow read: if request.auth != null && (isAdmin() || isProjectParticipant(projectId));

      // Update permissions
      allow update: if request.auth != null && (
        // Admin can update anything (as long as timestamps are server-set if present)
        isAdmin() ||
        // Owner can update almost anything (except ownerId and createdAt), ensuring updatedAt is server time
        (
          request.auth.uid == resource.data.ownerId &&
          request.resource.data.updatedAt == request.time &&
          (!request.resource.data.keys().has('ownerId') || request.resource.data.ownerId == resource.data.ownerId) &&
          (!request.resource.data.keys().has('createdAt') || request.resource.data.createdAt == resource.data.createdAt)
        ) ||
        // Authenticated user (invited via client-side logic) can add themselves to the members array
        (
          request.resource.data.keys().hasOnly(['members', 'updatedAt']) && // Only these fields are being modified
          request.resource.data.updatedAt == request.time &&
          !(request.auth.uid in resource.data.members) && // User is not already a member
          request.resource.data.members.size() == resource.data.members.size() + 1 && // Ensure only one member was added
          request.auth.uid in request.resource.data.members // The new member is the current user
        ) ||
        // Project participant (not owner) can ONLY update expense tracking fields
        (
          isProjectParticipant(projectId) &&
          request.auth.uid != resource.data.ownerId && // Not the owner
          request.resource.data.updatedAt == request.time &&
          request.resource.data.lastActivity == request.time &&
          // Ensure that NO OTHER critical fields are being changed by the participant
          !request.resource.data.keys().hasAny(['name', 'description', 'status', 'budget', 'ownerId', 'createdAt', 'members', 'tags', 'notes'])
        )
      );

      // Admin can delete any project.
      // The project owner can delete the project.
      allow delete: if request.auth != null && (isAdmin() || (request.auth.uid == resource.data.ownerId));

      // Authenticated users can list projects. Client-side queries must filter appropriately.
      allow list: if request.auth != null;
    }

    match /expenses/{expenseId} {
      // User can create an expense if they are a participant of the linked project.
      // Required fields: amount, currency, projectId, paidById, expenseDate, createdBy, createdAt, updatedAt.
      allow create: if request.auth != null &&
                       isProjectParticipant(request.resource.data.projectId) &&
                       request.resource.data.amount is number &&
                       request.resource.data.currency is string &&
                       request.resource.data.projectId is string &&
                       request.resource.data.paidById is string &&
                       request.resource.data.expenseDate is timestamp &&
                       request.resource.data.createdBy == request.auth.uid &&
                       request.resource.data.createdAt == request.time &&
                       request.resource.data.updatedAt == request.time;

      // Admin can read any expense.
      // A user can read an expense if they are a participant of the linked project.
      allow read: if request.auth != null && (isAdmin() || isProjectParticipant(resource.data.projectId));

      // Admin can update any expense.
      // A user can update an expense if they created it AND are a participant of the linked project.
      // Ensure updatedAt is set to server time.
      allow update: if request.auth != null && (
                      isAdmin() ||
                      (
                        isProjectParticipant(resource.data.projectId) &&
                        request.auth.uid == resource.data.createdBy &&
                        request.resource.data.updatedAt == request.time
                        // Add specific field write restrictions if needed, e.g., cannot change createdBy, projectId
                      )
                    );

      // Admin can delete any expense.
      // A user can delete an expense if they created it AND are a participant of the linked project.
      allow delete: if request.auth != null && (
                      isAdmin() ||
                      (isProjectParticipant(resource.data.projectId) && request.auth.uid == resource.data.createdBy)
                    );

      // Authenticated users can list expenses. Client-side queries must filter.
      allow list: if request.auth != null;
    }
  }
}

    