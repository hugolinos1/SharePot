
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is an admin
    function isAdmin() {
      // Ensure request.auth and request.auth.token exist to prevent errors on unauthenticated requests
      return request.auth != null && request.auth.token != null && request.auth.token.email == 'hugues.rabier@gmail.com';
    }

    // Helper function to check if the user is a participant (member or owner) of a project
    function isProjectParticipant(projectId) {
      let projectDoc = get(/databases/$(database)/documents/projects/$(projectId));
      return exists(/databases/$(database)/documents/projects/$(projectId)) &&
             (request.auth.uid == projectDoc.data.ownerId ||
              request.auth.uid in projectDoc.data.members);
    }

    match /users/{userId} {
      allow create: if request.auth != null && request.resource.data.id == request.auth.uid;
      allow read: if request.auth != null; // ANY authenticated user can read ANY user document.
      allow update: if isAdmin() ||
                       (request.auth.uid == userId &&
                        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['name', 'avatarUrl']) &&
                        !(request.resource.data.keys().hasAny(['isAdmin']) && resource.data.isAdmin == false && request.resource.data.isAdmin == true)
                       );
      allow delete: if isAdmin();
      allow list: if isAdmin();
    }

    match /projects/{projectId} {
      allow create: if request.auth != null &&
                       request.resource.data.ownerId == request.auth.uid &&
                       request.auth.uid in request.resource.data.members &&
                       request.resource.data.name is string && !request.resource.data.name.isEmpty() &&
                       request.resource.data.status is string &&
                       request.resource.data.createdAt == request.time &&
                       request.resource.data.updatedAt == request.time;

      allow read: if isAdmin() || isProjectParticipant(projectId);

      // TEMPORARILY SIMPLIFIED RULE FOR PARTICIPANT UPDATE - FOR TESTING
      allow update: if request.auth != null && (
                        isAdmin() ||
                        ( // Owner can update more fields
                          request.auth.uid == resource.data.ownerId &&
                          request.resource.data.updatedAt == request.time &&
                          (!request.resource.data.keys().has('ownerId') || request.resource.data.ownerId == resource.data.ownerId) &&
                          (!request.resource.data.keys().has('createdAt') || request.resource.data.createdAt == resource.data.createdAt)
                        ) ||
                        ( // Project participant - TEST RULE: allow if ownerId is not changed
                          isProjectParticipant(projectId) &&
                          request.resource.data.updatedAt == request.time && // Ensure server timestamp for audit
                          request.resource.data.ownerId == resource.data.ownerId // Basic check: owner must not change
                          // This is less secure as other fields could be changed.
                        )
                      );

      allow delete: if isAdmin() || (request.auth.uid == resource.data.ownerId);
      allow list: if request.auth != null;
    }

    match /expenses/{expenseId} {
      allow create: if request.auth != null &&
                       isProjectParticipant(request.resource.data.projectId) &&
                       request.resource.data.amount is number &&
                       request.resource.data.currency is string &&
                       request.resource.data.projectId is string &&
                       request.resource.data.paidById is string &&
                       request.resource.data.expenseDate is timestamp &&
                       request.resource.data.createdBy == request.auth.uid &&
                       request.resource.data.createdAt == request.time;

      allow read: if isAdmin() || isProjectParticipant(resource.data.projectId);
      allow update: if isAdmin() || (isProjectParticipant(resource.data.projectId) && request.auth.uid == resource.data.createdBy);
      allow delete: if isAdmin() || (isProjectParticipant(resource.data.projectId) && request.auth.uid == resource.data.createdBy);
      allow list: if request.auth != null;
    }
  }
}
