
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is an admin
    function isAdmin() {
      return request.auth.token.email == 'hugues.rabier@gmail.com';
    }

    // DIAGNOSTIC VERSION: Helper function to check if the user is a participant (member) of a project
    function isProjectParticipant(projectId) {
      let projectPath = /databases/$(database)/documents/projects/$(projectId);
      // Test: Check if project exists and if user is in members list
      return exists(projectPath) &&
             get(projectPath).data != null &&
             get(projectPath).data.members != null &&
             get(projectPath).data.members is list &&
             request.auth.uid in get(projectPath).data.members;
    }

    match /users/{userId} {
      allow create: if request.auth != null && request.resource.data.id == request.auth.uid;

      allow read: if request.auth != null; // Any authenticated user can read any user profile

      allow update: if isAdmin() ||
                       (request.auth.uid == userId &&
                        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['name', 'avatarUrl', 'avatarStoragePath']) &&
                        !(request.resource.data.keys().hasAny(['isAdmin']) && resource.data.isAdmin == false && request.resource.data.isAdmin == true)
                       );

      allow delete: if isAdmin();
      allow list: if isAdmin();
    }

    match /projects/{projectId} {
      allow create: if request.auth != null &&
                       request.resource.data.ownerId == request.auth.uid &&
                       request.auth.uid in request.resource.data.members &&
                       request.resource.data.name is string && request.resource.data.name.size() > 0 &&
                       request.resource.data.status is string &&
                       request.resource.data.createdAt == request.time &&
                       request.resource.data.updatedAt == request.time &&
                       request.resource.data.lastActivity == request.time;

      allow read: if isAdmin() ||
                     (
                       exists(/databases/$(database)/documents/projects/$(projectId)) &&
                       get(/databases/$(database)/documents/projects/$(projectId)).data != null &&
                       (
                         request.auth.uid == get(/databases/$(database)/documents/projects/$(projectId)).data.ownerId ||
                         (
                           get(/databases/$(database)/documents/projects/$(projectId)).data.members != null &&
                           get(/databases/$(database)/documents/projects/$(projectId)).data.members is list &&
                           request.auth.uid in get(/databases/$(database)/documents/projects/$(projectId)).data.members
                         )
                       )
                     );

      allow update: if request.auth != null && (
                        isAdmin() ||
                        ( // Owner can update almost anything
                          request.auth.uid == resource.data.ownerId &&
                          request.resource.data.updatedAt == request.time &&
                          (!request.resource.data.keys().has('ownerId') || request.resource.data.ownerId == resource.data.ownerId) &&
                          (!request.resource.data.keys().has('createdAt') || request.resource.data.createdAt == resource.data.createdAt)
                        ) ||
                        ( // Authenticated user (invited) can add themselves to the members array
                          request.resource.data.keys().hasOnly(['members', 'updatedAt']) &&
                          request.resource.data.members == resource.data.members.concat([request.auth.uid]) &&
                          !(request.auth.uid in resource.data.members) &&
                          request.resource.data.updatedAt == request.time
                        ) ||
                        ( // Project participant can ONLY update expense tracking fields
                          isProjectParticipant(projectId) && // Uses the diagnostic version of isProjectParticipant
                          request.resource.data.updatedAt == request.time &&
                          request.resource.data.lastActivity == request.time &&
                          // Ensure that NO OTHER critical fields are being changed by the participant
                          !request.resource.data.keys().hasAny(['name', 'description', 'status', 'budget', 'ownerId', 'createdAt', 'tags', 'notes']) &&
                          // For 'members', ensure it's not changed by this clause (owner or specific invite rule handles members)
                          request.resource.data.members == resource.data.members
                        )
                      );

      allow delete: if isAdmin() || (request.auth.uid == resource.data.ownerId);
      allow list: if request.auth != null;
    }

    match /expenses/{expenseId} {
      allow create: if request.auth != null &&
                       isProjectParticipant(request.resource.data.projectId) && // Uses the diagnostic version
                       request.resource.data.amount is number &&
                       request.resource.data.currency is string &&
                       request.resource.data.projectId is string &&
                       request.resource.data.paidById is string &&
                       request.resource.data.expenseDate is timestamp &&
                       request.resource.data.createdBy == request.auth.uid &&
                       request.resource.data.createdAt == request.time;

      allow read: if isAdmin() || isProjectParticipant(resource.data.projectId); // Uses the diagnostic version

      allow update: if isAdmin() ||
                       (
                         isProjectParticipant(resource.data.projectId) && // Uses the diagnostic version
                         request.auth.uid == resource.data.createdBy
                       );

      allow delete: if isAdmin() ||
                       (
                         isProjectParticipant(resource.data.projectId) && // Uses the diagnostic version
                         request.auth.uid == resource.data.createdBy
                       );

      allow list: if request.auth != null;
    }
  }
}
