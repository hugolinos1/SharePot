
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is an admin
    function isAdmin() {
      return request.auth != null && request.auth.token.email == 'hugues.rabier@gmail.com';
    }

    // Helper function to check if the user is a participant (member or owner) of a project
    function isProjectParticipant(projectId) {
      let projectPath = /databases/$(database)/documents/projects/$(projectId);
      if (!exists(projectPath)) {
        return false;
      }
      let projectData = get(projectPath).data;
      return request.auth != null &&
             projectData != null &&
             (
               request.auth.uid == projectData.ownerId ||
               (projectData.members != null && projectData.members is list && request.auth.uid in projectData.members)
             );
    }

    match /users/{userId} {
      // ANY authenticated user can create their OWN user document, ensuring the doc ID matches their UID
      // and they are setting their own ID correctly.
      allow create: if request.auth != null && 
                       request.auth.uid == userId &&
                       request.resource.data.id == request.auth.uid;

      // ANY authenticated user can read ANY user profile.
      // Application logic should handle displaying only relevant profiles.
      allow read: if request.auth != null;

      // Admin can update any user document.
      // A user can update their OWN user document for specific fields (name, avatarUrl, avatarStoragePath).
      // Crucially, a user cannot make themselves an admin.
      allow update: if request.auth != null && (
                       isAdmin() ||
                       (
                         request.auth.uid == userId &&
                         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['name', 'avatarUrl', 'avatarStoragePath', 'updatedAt']) &&
                         // Prevent self-promotion to admin by checking if isAdmin field is being changed from false to true by non-admin
                         (request.resource.data.keys().has('isAdmin') == false || request.resource.data.isAdmin == resource.data.isAdmin || request.resource.data.isAdmin == false) &&
                         // Ensure updatedAt is a server timestamp if present
                         (request.resource.data.keys().has('updatedAt') == false || request.resource.data.updatedAt == request.time)
                       )
                     );

      // Admin can delete any user document (except their own for safety, can be changed if needed).
      allow delete: if isAdmin() && request.auth.uid != userId;
      // Admin can list all users.
      allow list: if isAdmin();
    }

    match /projects/{projectId} {
      // ANY authenticated user can create a project.
      // The creator (request.auth.uid) MUST be the ownerId and a member.
      // Required fields: name, ownerId, members, status. Timestamps are set by server.
      allow create: if request.auth != null &&
                       request.resource.data.ownerId == request.auth.uid &&
                       request.auth.uid in request.resource.data.members &&
                       request.resource.data.name is string && request.resource.data.name.size() > 0 &&
                       request.resource.data.status is string &&
                       request.resource.data.createdAt == request.time &&
                       request.resource.data.updatedAt == request.time &&
                       request.resource.data.lastActivity == request.time;

      // Admin can read any project.
      // A user can read a project if they are an owner or a member.
      allow read: if isAdmin() || isProjectParticipant(projectId);

      // Update permissions
      allow update: if request.auth != null && (
        // Admin can update (respecting immutable fields if strictly needed)
        isAdmin() ||
        // Owner can update almost anything
        (
          request.auth.uid == resource.data.ownerId &&
          request.resource.data.updatedAt == request.time &&
          // Immutable fields for owner
          request.resource.data.ownerId == resource.data.ownerId && 
          request.resource.data.createdAt == resource.data.createdAt
        ) ||
        // Authenticated user (invited via client-side logic) can add themselves to the members array
        (
          request.auth.uid != null &&
          request.auth.uid != resource.data.ownerId && // User is not the owner
          (resource.data.members == null || (resource.data.members is list && !(request.auth.uid in resource.data.members))) && // User is not already a member or members list didn't exist
          // Check that ONLY 'members' and 'updatedAt' fields are being modified by this operation.
          // This relies on the client sending an update with { members: arrayUnion(...), updatedAt: serverTimestamp() }
          request.resource.data.keys().hasOnly(['members', 'updatedAt']) &&
          request.resource.data.updatedAt == request.time
        ) ||
        // Project participant (non-owner) can ONLY update expense tracking fields
        (
          isProjectParticipant(projectId) &&
          request.auth.uid != resource.data.ownerId && // Not the owner
          request.resource.data.updatedAt == request.time && 
          request.resource.data.lastActivity == request.time &&
          // Ensure that only allowed fields for participants are being modified.
          // This means if any other field is present in the request, it must be unchanged.
          (request.resource.data.keys().has('name') == false || request.resource.data.name == resource.data.name) &&
          (request.resource.data.keys().has('description') == false || request.resource.data.description == resource.data.description) &&
          (request.resource.data.keys().has('status') == false || request.resource.data.status == resource.data.status) &&
          (request.resource.data.keys().has('budget') == false || request.resource.data.budget == resource.data.budget) &&
          (request.resource.data.keys().has('ownerId') == false || request.resource.data.ownerId == resource.data.ownerId) &&
          (request.resource.data.keys().has('createdAt') == false || request.resource.data.createdAt == resource.data.createdAt) &&
          (request.resource.data.keys().has('members') == false || request.resource.data.members == resource.data.members) && // Participants cannot change members array generally
          (request.resource.data.keys().has('tags') == false || request.resource.data.tags == resource.data.tags) &&
          (request.resource.data.keys().has('notes') == false || request.resource.data.notes == resource.data.notes)
          // totalExpenses and recentExpenses are implicitly allowed to change as they are not listed here
        )
      );

      // Admin can delete any project.
      // The project owner can delete the project.
      allow delete: if isAdmin() || (request.auth.uid == resource.data.ownerId);

      // Authenticated users can list projects. Client-side queries must filter appropriately.
      allow list: if request.auth != null;
    }

    match /expenses/{expenseId} {
      // User can create an expense if they are a participant of the linked project.
      // Required fields: amount, currency, projectId, paidById, expenseDate, createdBy. Timestamps by server.
      allow create: if request.auth != null &&
                       isProjectParticipant(request.resource.data.projectId) &&
                       request.resource.data.amount is number &&
                       request.resource.data.currency is string &&
                       request.resource.data.projectId is string &&
                       request.resource.data.paidById is string &&
                       request.resource.data.expenseDate is timestamp &&
                       request.resource.data.createdBy == request.auth.uid &&
                       request.resource.data.createdAt == request.time &&
                       request.resource.data.updatedAt == request.time;

      // Admin can read any expense.
      // A user can read an expense if they are a participant of the linked project.
      allow read: if isAdmin() || isProjectParticipant(resource.data.projectId);

      // Admin can update any expense.
      // A user can update an expense if they created it AND are a participant of the linked project.
      // Ensure updatedAt is set to server time.
      allow update: if request.auth != null && (
                        isAdmin() ||
                        (
                          isProjectParticipant(resource.data.projectId) && 
                          request.auth.uid == resource.data.createdBy &&
                          request.resource.data.updatedAt == request.time &&
                          // Prevent changing critical fields like createdBy or projectId
                          request.resource.data.createdBy == resource.data.createdBy &&
                          request.resource.data.projectId == resource.data.projectId
                        )
                      );

      // Admin can delete any expense.
      // A user can delete an expense if they created it AND are a participant of the linked project.
      allow delete: if isAdmin() || 
                       (isProjectParticipant(resource.data.projectId) && request.auth.uid == resource.data.createdBy);

      // Authenticated users can list expenses. Client-side queries must filter appropriately.
      allow list: if request.auth != null;
    }
  }
}
