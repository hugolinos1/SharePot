
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is an admin
    function isAdmin() {
      return request.auth.token.email == 'hugues.rabier@gmail.com';
    }

    // Helper function to check if the user is a participant (member or owner) of a project
    // This version is for use within Firestore rules where `get()` is available.
    function isProjectParticipant(projectId) {
      let projectPath = /databases/$(database)/documents/projects/$(projectId);
      return exists(projectPath) &&
             get(projectPath).data != null &&
             (
               request.auth.uid == get(projectPath).data.ownerId ||
               (get(projectPath).data.members != null && get(projectPath).data.members is list && request.auth.uid in get(projectPath).data.members)
             );
    }

    match /users/{userId} {
      // ANY authenticated user can create their OWN user document, ensuring the doc ID matches their UID
      // and they are not trying to set isAdmin to true unless they are the designated admin email.
      allow create: if request.auth != null &&
                       request.resource.data.id == request.auth.uid &&
                       (request.resource.data.isAdmin == false || request.auth.token.email == 'hugues.rabier@gmail.com');

      // Admin can read any user document.
      // ANY authenticated user can read ANY user document.
      // The application logic should handle displaying only relevant profiles (e.g., project members).
      allow read: if request.auth != null;

      // Admin can update any user document.
      // A user can update their OWN user document (specific fields like name, avatarUrl, avatarStoragePath).
      // Ensure that isAdmin field cannot be changed by non-admins or by admin on themselves if it leads to loss of admin rights.
      allow update: if isAdmin() ||
                       (request.auth.uid == userId &&
                        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['name', 'avatarUrl', 'avatarStoragePath']) &&
                        // Prevent non-admin from setting isAdmin to true
                        (request.resource.data.isAdmin == false || resource.data.isAdmin == true) &&
                        // Prevent admin from setting their own isAdmin to false if they are the designated admin email
                        (userId != request.auth.uid || request.auth.token.email != 'hugues.rabier@gmail.com' || request.resource.data.isAdmin == true)
                       );

      // Admin can delete any user document, except their own if they are the designated admin.
      allow delete: if isAdmin() && request.auth.uid != userId;

      // Admin can list all users. Other authenticated users can list users (needed for project member selection by owner).
      allow list: if request.auth != null;
    }

    match /projects/{projectId} {
      // ANY authenticated user can create a project.
      // The creator (request.auth.uid) MUST be the ownerId and a member.
      // Required fields: name, ownerId, members, status, createdAt, updatedAt, lastActivity.
      allow create: if request.auth != null &&
                       request.resource.data.ownerId == request.auth.uid &&
                       request.auth.uid in request.resource.data.members &&
                       request.resource.data.name is string && request.resource.data.name.size() > 0 &&
                       request.resource.data.status is string &&
                       request.resource.data.createdAt == request.time &&
                       request.resource.data.updatedAt == request.time &&
                       request.resource.data.lastActivity == request.time;

      // Admin can read any project.
      // A user can read a project if they are an owner or a member.
      allow read: if isAdmin() || isProjectParticipant(projectId);

      // Update rules for projects
      allow update: if request.auth != null && (
        // Admin can update anything
        isAdmin() ||
        // Owner can update fields (except ownerId and createdAt)
        (
          request.auth.uid == resource.data.ownerId &&
          request.resource.data.updatedAt == request.time &&
          // ownerId and createdAt cannot be changed by the owner
          (!request.resource.data.keys().has('ownerId') || request.resource.data.ownerId == resource.data.ownerId) &&
          (!request.resource.data.keys().has('createdAt') || request.resource.data.createdAt == resource.data.createdAt)
        ) ||
        // Authenticated user (invited via client-side logic using arrayUnion for 'members') can add themselves to the members array
        (
          // This rule assumes the client is sending an update with arrayUnion for 'members'
          // and serverTimestamp for 'updatedAt'.
          request.auth.uid != null &&
          // Check that ONLY 'members' and 'updatedAt' are part of the update operation payload from the client.
          // This means the request.resource.data (which is the state *after* the update) will contain all original fields + the modified ones.
          // We ensure no *other* fields than members and updatedAt are being *changed* by the client.
          // All other fields in request.resource.data must be identical to resource.data.
          request.resource.data.name == resource.data.name &&
          request.resource.data.description == resource.data.description &&
          request.resource.data.status == resource.data.status &&
          request.resource.data.budget == resource.data.budget &&
          request.resource.data.ownerId == resource.data.ownerId &&
          request.resource.data.createdAt == resource.data.createdAt &&
          request.resource.data.tags == resource.data.tags && // Assuming tags are not changed in this operation
          request.resource.data.notes == resource.data.notes && // Assuming notes are not changed
          // Check that 'updatedAt' is correctly set to be a server timestamp by the client.
          request.resource.data.updatedAt == request.time &&
          // Ensure the user is not already a member of the existing document.
          (resource.data.members == null || !(request.auth.uid in resource.data.members)) &&
          // The new user's UID must be in the new members array (which is the result of arrayUnion)
          request.auth.uid in request.resource.data.members &&
          // Ensure only one member was added
          request.resource.data.members.size() == (resource.data.members == null ? 0 : resource.data.members.size()) + 1
        ) ||
        // Project participant can ONLY update expense tracking fields
        (
          isProjectParticipant(projectId) &&
          request.auth.uid != resource.data.ownerId && // Not the owner
          request.resource.data.updatedAt == request.time &&
          request.resource.data.lastActivity == request.time &&
          // Ensure that NO OTHER critical fields are being changed by the participant.
          // All other fields in request.resource.data must be identical to resource.data.
          request.resource.data.name == resource.data.name &&
          request.resource.data.description == resource.data.description &&
          request.resource.data.status == resource.data.status &&
          request.resource.data.budget == resource.data.budget &&
          request.resource.data.ownerId == resource.data.ownerId &&
          request.resource.data.createdAt == resource.data.createdAt &&
          request.resource.data.members == resource.data.members &&
          request.resource.data.tags == resource.data.tags &&
          request.resource.data.notes == resource.data.notes
          // totalExpenses and recentExpenses are allowed to change as they are not in the above checks
        )
      );

      // Admin can delete any project.
      // The project owner can delete the project.
      allow delete: if isAdmin() || (request.auth.uid == resource.data.ownerId);

      // Authenticated users can list projects. Client-side queries must filter appropriately.
      allow list: if request.auth != null;
    }

    match /expenses/{expenseId} {
      // User can create an expense if they are a participant of the linked project.
      // Required fields: amount, currency, projectId, paidById, expenseDate, createdBy.
      allow create: if request.auth != null &&
                       isProjectParticipant(request.resource.data.projectId) &&
                       request.resource.data.amount is number &&
                       request.resource.data.currency is string &&
                       request.resource.data.projectId is string &&
                       request.resource.data.paidById is string &&
                       request.resource.data.expenseDate is timestamp &&
                       request.resource.data.createdBy == request.auth.uid &&
                       request.resource.data.createdAt == request.time &&
                       request.resource.data.updatedAt == request.time;

      // Admin can read any expense.
      // A user can read an expense if they are a participant of the linked project.
      allow read: if isAdmin() || isProjectParticipant(resource.data.projectId);

      // Admin can update any expense.
      // A user can update an expense if they created it AND are a participant of the linked project.
      // Only specific fields can be updated by the creator.
      allow update: if request.auth != null && (
                       isAdmin() ||
                       (
                         isProjectParticipant(resource.data.projectId) &&
                         request.auth.uid == resource.data.createdBy &&
                         request.resource.data.updatedAt == request.time &&
                         // Prevent changing who created it or the project it belongs to
                         request.resource.data.createdBy == resource.data.createdBy &&
                         request.resource.data.projectId == resource.data.projectId &&
                         // Allow changes to these fields
                         request.resource.data.keys().hasOnly(['title', 'amount', 'currency', 'paidById', 'paidByName', 'expenseDate', 'category', 'updatedAt', 'tags'])
                       )
                     );

      // Admin can delete any expense.
      // A user can delete an expense if they created it AND are a participant of the linked project.
      allow delete: if isAdmin() || (isProjectParticipant(resource.data.projectId) && request.auth.uid == resource.data.createdBy);

      // Authenticated users can list expenses. Client-side queries must filter.
      allow list: if request.auth != null;
    }
  }
}
