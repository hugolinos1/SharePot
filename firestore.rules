
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to identify the Admin user by email
    function isAdmin() {
      return request.auth.token.email == 'hugues.rabier@gmail.com';
    }

    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Users Collection (/users/{userId})
    // Document ID should be the user's UID from Firebase Auth
    match /users/{userId} {
      // ADMIN ACCESS: Admin can read and write any user document.
      allow read, write: if isAdmin();

      // AUTHENTICATED USER ACCESS:
      // Read: Any authenticated user can get any user's profile (e.g., for listing users to add to projects).
      // Consider restricting fields if sensitive data is present.
      allow get: if isAuthenticated();
      // List: Authenticated users can list/query user profiles.
      allow list: if isAuthenticated();

      // Create: An authenticated user can create their own user document.
      // - They cannot assign themselves as admin during creation.
      allow create: if isAuthenticated() && request.auth.uid == userId
                    && (!('isAdmin'in request.resource.data) || request.resource.data.isAdmin == false);

      // Update: An authenticated user can update their own user document.
      // - They cannot change their 'isAdmin' status.
      // - They cannot change their 'email' (assuming email is a key identifier).
      // - Whitelist other updatable fields (e.g., 'name', 'avatarUrl').
      allow update: if isAuthenticated() && request.auth.uid == userId
                    && (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['name', 'avatarUrl', 'preferences'])) // Adjust whitelisted fields as needed
                    && (resource.data.email == request.resource.data.email) // Email cannot be changed by user
                    && (resource.data.isAdmin == request.resource.data.isAdmin); // isAdmin status cannot be changed by user

      // Delete: Regular users cannot delete user documents. Admin can (covered by admin rule).
      allow delete: if false;
    }

    // Projects Collection (/projects/{projectId})
    match /projects/{projectId} {
      // ADMIN ACCESS: Admin can read and write any project document.
      allow read, write: if isAdmin();

      // AUTHENTICATED USER ACCESS:
      // Create: Any authenticated user can create a project.
      // - 'ownerId' must be the creator's UID.
      // - Creator's UID must be in the 'members' array.
      // - Validate required fields (name, status, initial expenses/budget, createdAt timestamp).
      allow create: if isAuthenticated()
                    && request.resource.data.ownerId == request.auth.uid
                    && request.auth.uid in request.resource.data.members
                    && request.resource.data.name is string && request.resource.data.name.size() > 0
                    && request.resource.data.status is string
                    && request.resource.data.totalExpenses == 0
                    && request.resource.data.budget is number
                    && request.resource.data.createdAt == request.time
                    && request.resource.data.updatedAt == request.time;

      // Read (Get): Owner or a member of the project can read the project.
      allow get: if isAuthenticated() && (request.auth.uid == resource.data.ownerId || request.auth.uid in resource.data.members);
      // Read (List): Authenticated users can list projects (client-side queries should filter based on membership/ownership).
      allow list: if isAuthenticated();

      // Update: Project owner can update the project.
      // - 'ownerId' and 'createdAt' cannot be changed.
      // - 'updatedAt' must be set to server timestamp.
      // - Other fields like name, description, status, budget, members, notes, tags can be updated by owner.
      allow update: if isAuthenticated() && request.auth.uid == resource.data.ownerId
                    && request.resource.data.ownerId == resource.data.ownerId
                    && request.resource.data.createdAt == resource.data.createdAt
                    && request.resource.data.updatedAt == request.time;

      // Delete: Project owner can delete the project. Admin can also (covered by admin rule).
      allow delete: if isAuthenticated() && request.auth.uid == resource.data.ownerId;
    }

    // Expenses Collection (/expenses/{expenseId})
    match /expenses/{expenseId} {
      // ADMIN ACCESS: Admin can read and write any expense document.
      allow read, write: if isAdmin();

      // Helper function to check if the requesting user is a member (or owner) of the project linked to this expense.
      // Assumes project documents have an 'ownerId' (UID) and a 'members' array (list of UIDs).
      function isProjectParticipant(projectId) {
        let projectDoc = get(/databases/$(database)/documents/projects/$(projectId));
        return request.auth.uid == projectDoc.data.ownerId || request.auth.uid in projectDoc.data.members;
      }

      // AUTHENTICATED USER ACCESS:
      // Create: An authenticated user who is a participant of the project can create an expense for it.
      // - 'createdByUid' must be their UID.
      // - Validate required fields (title, amount, currency, projectId, expenseDate, createdAt timestamp).
      allow create: if isAuthenticated()
                    && request.resource.data.createdByUid == request.auth.uid
                    && request.resource.data.title is string && request.resource.data.title.size() > 0
                    && request.resource.data.amount is number // Allow positive or negative for reimbursements if needed, or enforce >0
                    && request.resource.data.currency is string
                    && request.resource.data.projectId is string
                    && request.resource.data.expenseDate is timestamp
                    && request.resource.data.createdAt == request.time
                    && request.resource.data.updatedAt == request.time
                    && isProjectParticipant(request.resource.data.projectId);

      // Read (Get): A participant of the linked project can read the expense.
      allow get: if isAuthenticated() && isProjectParticipant(resource.data.projectId);
      // Read (List): Authenticated users can list expenses (client-side queries should filter).
      allow list: if isAuthenticated();

      // Update: A participant of the linked project can update the expense.
      // - 'createdByUid', 'projectId', 'createdAt' cannot be changed.
      // - 'updatedAt' must be set to server timestamp.
      allow update: if isAuthenticated() && isProjectParticipant(resource.data.projectId)
                    && request.resource.data.createdByUid == resource.data.createdByUid
                    && request.resource.data.projectId == resource.data.projectId
                    && request.resource.data.createdAt == resource.data.createdAt
                    && request.resource.data.updatedAt == request.time;

      // Delete: A participant of the linked project can delete the expense.
      allow delete: if isAuthenticated() && isProjectParticipant(resource.data.projectId);
    }
  }
}

    