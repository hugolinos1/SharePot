rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is an admin
    function isAdmin() {
      return request.auth.token.email == 'hugues.rabier@gmail.com';
    }

    // Helper function to check if the user is a participant (member or owner) of a project
    function isProjectParticipant(projectId) {
      let projectDocPath = /databases/$(database)/documents/projects/$(projectId);
      return exists(projectDocPath) &&
             request.auth != null && // Ensure user is authenticated for this check
             (
               request.auth.uid == get(projectDocPath).data.ownerId ||
               request.auth.uid in get(projectDocPath).data.members
             );
    }

    match /users/{userId} {
      allow create: if request.auth != null && request.resource.data.id == request.auth.uid;

      allow read: if request.auth != null; // Any authenticated user can read any user profile

      allow update: if isAdmin() ||
                       (request.auth.uid == userId &&
                        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['name', 'avatarUrl', 'avatarStoragePath']) &&
                        !(request.resource.data.keys().hasAny(['isAdmin']) && resource.data.isAdmin == false && request.resource.data.isAdmin == true)
                       );

      allow delete: if isAdmin();
      allow list: if isAdmin();
    }

    match /projects/{projectId} {
      allow create: if request.auth != null &&
                       request.resource.data.ownerId == request.auth.uid &&
                       request.auth.uid in request.resource.data.members &&
                       request.resource.data.name is string && request.resource.data.name.size() > 0 &&
                       request.resource.data.status is string &&
                       request.resource.data.createdAt == request.time &&
                       request.resource.data.updatedAt == request.time &&
                       request.resource.data.lastActivity == request.time;

      allow read: if isAdmin() || isProjectParticipant(projectId);

      allow update: if request.auth != null && (
                        isAdmin() || // Admin can update anything permitted by field constraints
                        ( // Owner can update most fields
                          request.auth.uid == resource.data.ownerId &&
                          request.resource.data.updatedAt == request.time &&
                          // Owner cannot change ownerId or createdAt
                          request.resource.data.ownerId == resource.data.ownerId &&
                          request.resource.data.createdAt == resource.data.createdAt
                        ) ||
                        ( // A newly invited and authenticated user can add themselves to the members array
                          request.auth.uid != resource.data.ownerId && // Must not be the owner (owner has broader permissions)
                          request.resource.data.members.hasAll(resource.data.members) && // Cannot remove other members
                          request.resource.data.members.hasAny([request.auth.uid]) && // Must be adding self
                          request.resource.data.members.size() == resource.data.members.size() + 1 && // Only adding one person (self)
                          // All other critical fields must remain unchanged by this self-add operation
                          request.resource.data.ownerId == resource.data.ownerId &&
                          request.resource.data.name == resource.data.name &&
                          request.resource.data.description == resource.data.description &&
                          request.resource.data.status == resource.data.status &&
                          request.resource.data.budget == resource.data.budget &&
                          request.resource.data.createdAt == resource.data.createdAt &&
                          request.resource.data.tags == resource.data.tags &&
                          request.resource.data.notes == resource.data.notes &&
                          request.resource.data.totalExpenses == resource.data.totalExpenses &&
                          request.resource.data.recentExpenses == resource.data.recentExpenses &&
                          request.resource.data.lastActivity == resource.data.lastActivity && // lastActivity should not be changed by self-add
                          request.resource.data.updatedAt == request.time // updatedAt is always updated
                        )
                      );

      allow delete: if isAdmin() || (request.auth.uid == resource.data.ownerId);
      allow list: if request.auth != null;
    }

    match /expenses/{expenseId} {
      allow create: if request.auth != null &&
                       isProjectParticipant(request.resource.data.projectId) &&
                       request.resource.data.amount is number &&
                       request.resource.data.currency is string &&
                       request.resource.data.projectId is string &&
                       request.resource.data.paidById is string &&
                       request.resource.data.expenseDate is timestamp &&
                       request.resource.data.createdBy == request.auth.uid &&
                       request.resource.data.createdAt == request.time;

      allow read: if isAdmin() || isProjectParticipant(resource.data.projectId);

      allow update: if request.auth != null && (
                        isAdmin() ||
                        (isProjectParticipant(resource.data.projectId) && request.auth.uid == resource.data.createdBy)
                      );

      allow delete: if request.auth != null && (
                        isAdmin() ||
                        (isProjectParticipant(resource.data.projectId) && request.auth.uid == resource.data.createdBy)
                      );

      allow list: if request.auth != null;
    }
  }
}
