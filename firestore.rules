
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is an admin
    function isAdmin() {
      return request.auth.token.email == 'hugues.rabier@gmail.com';
    }

    // Helper function to check if the user is a participant (member or owner) of a project
    function isProjectParticipant(projectId) {
      let projectPath = /databases/$(database)/documents/projects/$(projectId);
      // Ensure the project document exists and has data before trying to access its fields
      return exists(projectPath) &&
             get(projectPath).data != null &&
             (
               request.auth.uid == get(projectPath).data.ownerId ||
               (get(projectPath).data.members != null && get(projectPath).data.members is list && request.auth.uid in get(projectPath).data.members)
             );
    }

    match /users/{userId} {
      allow create: if request.auth != null && request.resource.data.id == request.auth.uid;

      allow read: if request.auth != null; // Any authenticated user can read any user profile

      allow update: if isAdmin() ||
                       (request.auth.uid == userId &&
                        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['name', 'avatarUrl', 'avatarStoragePath']) &&
                        // Prevent non-admins from making themselves admin
                        (request.resource.data.isAdmin == resource.data.isAdmin || request.resource.data.isAdmin == false)
                       );

      allow delete: if isAdmin();
      allow list: if isAdmin();
    }

    match /projects/{projectId} {
      allow create: if request.auth != null &&
                       request.resource.data.ownerId == request.auth.uid &&
                       request.auth.uid in request.resource.data.members &&
                       request.resource.data.name is string && request.resource.data.name.size() > 0 &&
                       request.resource.data.status is string &&
                       request.resource.data.createdAt == request.time &&
                       request.resource.data.updatedAt == request.time &&
                       request.resource.data.lastActivity == request.time;

      allow read: if isAdmin() || isProjectParticipant(projectId);

      allow update: if request.auth != null && (
        // Admin can update anything
        isAdmin() ||
        // Owner can update almost anything (except ownerId and createdAt)
        (
          request.auth.uid == resource.data.ownerId &&
          request.resource.data.updatedAt == request.time &&
          (!request.resource.data.keys().has('ownerId') || request.resource.data.ownerId == resource.data.ownerId) &&
          (!request.resource.data.keys().has('createdAt') || request.resource.data.createdAt == resource.data.createdAt)
        ) ||
        // Authenticated user (invited via client-side logic) can add themselves to the members array
        (
          request.resource.data.keys().hasOnly(['members', 'updatedAt']) &&
          request.resource.data.updatedAt == request.time &&
          (resource.data.members == null || !(request.auth.uid in resource.data.members)) && // User is not already a member, handles case where members might be null initially
          request.resource.data.members is list && // Ensure the new members field is a list
          request.auth.uid in request.resource.data.members && // The new user's UID must be in the new members array
          request.resource.data.members.size() == (resource.data.members == null ? 0 : resource.data.members.size()) + 1 // Ensure only one member was added
        ) ||
        // Project participant (already a member, not owner) can ONLY update expense tracking fields
        (
          isProjectParticipant(projectId) &&
          request.auth.uid != resource.data.ownerId && // Not the owner
          request.resource.data.updatedAt == request.time &&
          request.resource.data.lastActivity == request.time &&
          // Ensure that NO OTHER critical fields are being changed by the participant
          !request.resource.data.keys().hasAny(['name', 'description', 'status', 'budget', 'ownerId', 'createdAt', 'members', 'tags', 'notes'])
        )
      );

      allow delete: if isAdmin() || (request.auth.uid == resource.data.ownerId);
      allow list: if request.auth != null;
    }

    match /expenses/{expenseId} {
      allow create: if request.auth != null &&
                       isProjectParticipant(request.resource.data.projectId) &&
                       request.resource.data.amount is number &&
                       request.resource.data.currency is string &&
                       request.resource.data.projectId is string &&
                       request.resource.data.paidById is string &&
                       request.resource.data.expenseDate is timestamp &&
                       request.resource.data.createdBy == request.auth.uid &&
                       request.resource.data.createdAt == request.time &&
                       request.resource.data.updatedAt == request.time;

      allow read: if isAdmin() || isProjectParticipant(resource.data.projectId);

      allow update: if isAdmin() ||
                       (isProjectParticipant(resource.data.projectId) &&
                        request.auth.uid == resource.data.createdBy &&
                        request.resource.data.projectId == resource.data.projectId && // projectId cannot be changed
                        request.resource.data.createdBy == resource.data.createdBy && // createdBy cannot be changed
                        request.resource.data.updatedAt == request.time
                       );

      allow delete: if isAdmin() || (isProjectParticipant(resource.data.projectId) && request.auth.uid == resource.data.createdBy);
      allow list: if request.auth != null;
    }
  }
}
