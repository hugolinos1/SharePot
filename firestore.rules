
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is an admin
    function isAdmin() {
      return request.auth.token.email == 'hugues.rabier@gmail.com';
    }

    // Helper function to check if the user is a participant (member or owner) of a project
    function isProjectParticipant(projectId) {
      let projectPath = /databases/$(database)/documents/projects/$(projectId);
      return exists(projectPath) &&
             get(projectPath).data != null && // Ensure data exists before accessing
             (
               request.auth.uid == get(projectPath).data.ownerId ||
               (get(projectPath).data.members != null && get(projectPath).data.members is list && request.auth.uid in get(projectPath).data.members)
             );
    }

    match /users/{userId} {
      // ANY authenticated user can create their OWN user document, ensuring the doc ID matches their UID
      // and they are not trying to set themselves as admin unless they are THE admin.
      allow create: if request.auth != null &&
                       request.resource.data.id == request.auth.uid &&
                       (request.resource.data.isAdmin == false || isAdmin());

      // Admin can read any user document.
      // ANY authenticated user can read ANY user document (needed for project member lists etc.).
      allow read: if request.auth != null;

      // Admin can update any user document.
      // A user can update their OWN user document for specific fields (name, avatarUrl, avatarStoragePath).
      // A user cannot make themselves an admin. Only an admin can make another user an admin.
      allow update: if request.auth != null && (
                      isAdmin() ||
                      (
                        request.auth.uid == userId &&
                        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['name', 'avatarUrl', 'avatarStoragePath']) &&
                        (request.resource.data.isAdmin == resource.data.isAdmin) // isAdmin status cannot be changed by self
                      )
                    );

      // Admin can delete any user document (Firestore document only, not Firebase Auth user).
      // A user cannot delete their own document through this rule (can be added if needed).
      allow delete: if isAdmin() && request.auth.uid != userId; // Admin cannot delete themselves

      // Admin can list all users. Other users cannot list all users.
      allow list: if isAdmin();
    }

    match /projects/{projectId} {
      // ANY authenticated user can create a project.
      // The creator (request.auth.uid) MUST be the ownerId and a member.
      // Required fields: name, ownerId, members, status, createdAt, updatedAt, lastActivity.
      allow create: if request.auth != null &&
                       request.resource.data.ownerId == request.auth.uid &&
                       request.auth.uid in request.resource.data.members &&
                       request.resource.data.name is string && request.resource.data.name.size() > 0 &&
                       request.resource.data.status is string &&
                       request.resource.data.createdAt == request.time &&
                       request.resource.data.updatedAt == request.time &&
                       request.resource.data.lastActivity == request.time;

      // Admin can read any project.
      // A user can read a project if they are an owner or a member.
      allow read: if request.auth != null && (isAdmin() || isProjectParticipant(projectId));

      // Update rules for projects
      allow update: if request.auth != null && (
        // Admin can update anything, but must respect ownerId and createdAt immutability
        (
          isAdmin() &&
          request.resource.data.updatedAt == request.time &&
          (!request.resource.data.keys().has('ownerId') || request.resource.data.ownerId == resource.data.ownerId) &&
          (!request.resource.data.keys().has('createdAt') || request.resource.data.createdAt == resource.data.createdAt)
        ) ||
        // Owner can update almost anything (except ownerId and createdAt)
        (
          request.auth.uid == resource.data.ownerId &&
          request.resource.data.updatedAt == request.time &&
          (!request.resource.data.keys().has('ownerId') || request.resource.data.ownerId == resource.data.ownerId) &&
          (!request.resource.data.keys().has('createdAt') || request.resource.data.createdAt == resource.data.createdAt)
        ) ||
        // Authenticated user (invited via client-side logic) can add themselves to the members array
        (
          request.auth.uid != null &&
          // This rule is specifically for a new user (invited) adding themselves.
          // It assumes the client sends an update like: { members: arrayUnion(request.auth.uid), updatedAt: serverTimestamp() }
          // We check that ONLY 'members' and 'updatedAt' could possibly be in the request.resource.data from the client.
          // This is tricky because arrayUnion is a transform, not a direct value in request.resource.data.
          // A robust way is to check that no *other* critical fields are being changed.
          request.resource.data.keys().hasOnly(['members', 'updatedAt']) &&
          request.resource.data.updatedAt == request.time &&
          (resource.data.members == null || (resource.data.members is list && !(request.auth.uid in resource.data.members))) // User is not already a member OR members field didn't exist
          // The arrayUnion itself handles adding the UID. We just ensure no other fields are touched.
        ) ||
        // Project participant (not owner) can ONLY update expense tracking fields
        (
          isProjectParticipant(projectId) &&
          request.auth.uid != resource.data.ownerId && // Must not be the owner (owner has broader permissions above)
          request.resource.data.updatedAt == request.time &&
          request.resource.data.lastActivity == request.time &&
          // Ensure that NO OTHER critical fields are being changed by the participant
          (request.resource.data.keys().has('name') == false || request.resource.data.name == resource.data.name) &&
          (request.resource.data.keys().has('description') == false || request.resource.data.description == resource.data.description) &&
          (request.resource.data.keys().has('status') == false || request.resource.data.status == resource.data.status) &&
          (request.resource.data.keys().has('budget') == false || request.resource.data.budget == resource.data.budget) &&
          (request.resource.data.keys().has('ownerId') == false || request.resource.data.ownerId == resource.data.ownerId) &&
          (request.resource.data.keys().has('createdAt') == false || request.resource.data.createdAt == resource.data.createdAt) &&
          (request.resource.data.keys().has('members') == false || request.resource.data.members == resource.data.members) && // Participants cannot change members array
          (request.resource.data.keys().has('tags') == false || request.resource.data.tags == resource.data.tags) &&
          (request.resource.data.keys().has('notes') == false || request.resource.data.notes == resource.data.notes)
        )
      );

      // Admin can delete any project.
      // The project owner can delete the project.
      allow delete: if request.auth != null && (isAdmin() || (request.auth.uid == resource.data.ownerId));

      // Authenticated users can list projects. Client-side queries must filter appropriately.
      allow list: if request.auth != null;
    }

    match /expenses/{expenseId} {
      // User can create an expense if they are a participant of the linked project.
      // Required fields: amount, currency, projectId, paidById, expenseDate, createdBy, createdAt, updatedAt.
      allow create: if request.auth != null &&
                       isProjectParticipant(request.resource.data.projectId) &&
                       request.resource.data.amount is number &&
                       request.resource.data.currency is string &&
                       request.resource.data.projectId is string &&
                       request.resource.data.paidById is string &&
                       request.resource.data.expenseDate is timestamp &&
                       request.resource.data.createdBy == request.auth.uid &&
                       request.resource.data.createdAt == request.time &&
                       request.resource.data.updatedAt == request.time;

      // Admin can read any expense.
      // A user can read an expense if they are a participant of the linked project.
      allow read: if request.auth != null && (isAdmin() || isProjectParticipant(resource.data.projectId));

      // Admin can update any expense.
      // A user can update an expense if they created it AND are a participant of the linked project.
      // Ensure updatedAt is set.
      allow update: if request.auth != null &&
                       request.resource.data.updatedAt == request.time &&
                       (
                         isAdmin() ||
                         (
                           isProjectParticipant(resource.data.projectId) &&
                           request.auth.uid == resource.data.createdBy &&
                           request.resource.data.createdBy == resource.data.createdBy && // Cannot change who created it
                           request.resource.data.projectId == resource.data.projectId    // Cannot change the project it belongs to
                         )
                       );

      // Admin can delete any expense.
      // A user can delete an expense if they created it AND are a participant of the linked project.
      allow delete: if request.auth != null &&
                       (
                         isAdmin() ||
                         (isProjectParticipant(resource.data.projectId) && request.auth.uid == resource.data.createdBy)
                       );

      // Authenticated users can list expenses. Client-side queries must filter.
      allow list: if request.auth != null;
    }
  }
}

    