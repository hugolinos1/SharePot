
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is an admin
    function isAdmin() {
      return request.auth.token.email == 'hugues.rabier@gmail.com';
    }

    // Helper function to check if the user is a participant (member or owner) of a project
    // It also checks if the project document actually exists.
    function isProjectParticipant(projectId) {
      let projectPath = /databases/$(database)/documents/projects/$(projectId);
      return exists(projectPath) &&
             (
               request.auth.uid == get(projectPath).data.ownerId ||
               (get(projectPath).data.members != null && request.auth.uid in get(projectPath).data.members)
             );
    }

    match /users/{userId} {
      // ANY authenticated user can create their OWN user document, ensuring the doc ID matches their UID
      // and they are not trying to set themselves as admin unless they are THE admin.
      allow create: if request.auth != null &&
                       request.resource.data.id == request.auth.uid &&
                       (request.resource.data.isAdmin == false || isAdmin()); // Prevent self-promotion to admin

      // Admin can read any user document.
      // An authenticated user can read ANY user document (needed for project members display).
      allow read: if request.auth != null;

      // Admin can update any user document.
      // A user can update their OWN user document for specific fields.
      // Prevent users from making themselves admin unless they are THE admin.
      allow update: if request.auth != null &&
                       (
                         isAdmin() ||
                         ( // User updating their own profile for allowed fields
                           request.auth.uid == userId &&
                           request.resource.data.diff(resource.data).affectedKeys().hasOnly(['name', 'avatarUrl', 'avatarStoragePath']) &&
                           // Prevent changing isAdmin status unless it's from true to false (admin demoting themselves - unlikely via UI)
                           // or if they are already admin (isAdmin() would be true and caught by the first part of OR)
                           // This specific check prevents a non-admin from setting isAdmin to true.
                           (request.resource.data.keys().has('isAdmin') == false || request.resource.data.isAdmin == resource.data.isAdmin || request.resource.data.isAdmin == false)
                         )
                       );


      // Admin can delete any user document (except their own, as a safeguard).
      // Users cannot delete their own accounts through this rule directly.
      allow delete: if isAdmin() && request.auth.uid != userId;

      // Admin can list all users.
      // Other authenticated users can list users (needed for adding members to projects).
      allow list: if request.auth != null;
    }

    match /projects/{projectId} {
      // ANY authenticated user can create a project.
      // The creator (request.auth.uid) MUST be the ownerId and a member.
      // Required fields: name, ownerId, members, status, createdAt, updatedAt, lastActivity.
      allow create: if request.auth != null &&
                       request.resource.data.ownerId == request.auth.uid &&
                       request.auth.uid in request.resource.data.members &&
                       request.resource.data.name is string && request.resource.data.name.size() > 0 &&
                       request.resource.data.status is string &&
                       request.resource.data.createdAt == request.time &&
                       request.resource.data.updatedAt == request.time &&
                       request.resource.data.lastActivity == request.time;

      // Admin can read any project.
      // A user can read a project if they are an owner or a member.
      allow read: if isAdmin() || isProjectParticipant(projectId);

      // Admin can update any project.
      // The project owner can update most project fields.
      // Project participants can update specific fields related to expense tracking.
      allow update: if request.auth != null && (
                        isAdmin() ||
                        ( // Owner can update more fields
                          request.auth.uid == resource.data.ownerId &&
                          request.resource.data.updatedAt == request.time &&
                          // Owner cannot change ownerId or createdAt via this rule
                          (!request.resource.data.keys().has('ownerId') || request.resource.data.ownerId == resource.data.ownerId) &&
                          (!request.resource.data.keys().has('createdAt') || request.resource.data.createdAt == resource.data.createdAt)
                        ) ||
                        ( // Project participant can ONLY update expense tracking fields if not owner
                          isProjectParticipant(projectId) &&
                          request.auth.uid != resource.data.ownerId && // Not the owner, but a participant
                          request.resource.data.updatedAt == request.time && // Timestamps must be server-set
                          request.resource.data.lastActivity == request.time && // Timestamps must be server-set
                          // Fields that participants CANNOT change must remain the same
                          request.resource.data.name == resource.data.name &&
                          request.resource.data.description == resource.data.description &&
                          request.resource.data.status == resource.data.status &&
                          request.resource.data.budget == resource.data.budget &&
                          request.resource.data.ownerId == resource.data.ownerId &&
                          request.resource.data.createdAt == resource.data.createdAt &&
                          request.resource.data.members == resource.data.members &&
                          request.resource.data.tags == resource.data.tags &&
                          request.resource.data.notes == resource.data.notes
                          // totalExpenses and recentExpenses are implicitly allowed to change for participants by not being checked here.
                        )
                      );


      // Admin can delete any project.
      // The project owner can delete the project.
      allow delete: if isAdmin() || (request.auth.uid == resource.data.ownerId);

      // Authenticated users can list projects. Client-side queries must filter appropriately.
      allow list: if request.auth != null;
    }

    match /expenses/{expenseId} {
      // User can create an expense if they are a participant of the linked project.
      // Required fields: amount, currency, projectId, paidById, expenseDate, createdBy.
      allow create: if request.auth != null &&
                       isProjectParticipant(request.resource.data.projectId) &&
                       request.resource.data.amount is number &&
                       request.resource.data.currency is string &&
                       request.resource.data.projectId is string &&
                       request.resource.data.paidById is string &&
                       request.resource.data.expenseDate is timestamp &&
                       request.resource.data.createdBy == request.auth.uid &&
                       request.resource.data.createdAt == request.time &&
                       request.resource.data.updatedAt == request.time; // Ensure updatedAt is set on create

      // Admin can read any expense.
      // A user can read an expense if they are a participant of the linked project.
      allow read: if isAdmin() || isProjectParticipant(resource.data.projectId);

      // Admin can update any expense.
      // A user can update an expense if they created it AND are a participant of the linked project.
      // Ensure only specific fields can be updated and timestamps are handled.
      allow update: if isAdmin() ||
                       (
                         isProjectParticipant(resource.data.projectId) &&
                         request.auth.uid == resource.data.createdBy &&
                         request.resource.data.updatedAt == request.time &&
                         request.resource.data.createdBy == resource.data.createdBy && // Cannot change creator
                         request.resource.data.projectId == resource.data.projectId &&   // Cannot change project
                         request.resource.data.createdAt == resource.data.createdAt     // Cannot change creation date
                         // Add other fields that a user is allowed to update, e.g. title, amount, currency, paidById, expenseDate, category
                         // request.resource.data.diff(resource.data).affectedKeys().hasOnly(['title', 'amount', 'currency', 'paidById', 'expenseDate', 'category', 'updatedAt'])
                       );


      // Admin can delete any expense.
      // A user can delete an expense if they created it AND are a participant of the linked project.
      allow delete: if isAdmin() || (isProjectParticipant(resource.data.projectId) && request.auth.uid == resource.data.createdBy);

      // Authenticated users can list expenses. Client-side queries must filter.
      allow list: if request.auth != null;
    }
  }
}
