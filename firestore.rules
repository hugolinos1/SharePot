
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is an admin
    function isAdmin() {
      return request.auth.token.email == 'hugues.rabier@gmail.com';
    }

    // Helper function to check if the user is a participant (member or owner) of a project
    function isProjectParticipant(projectId) {
      let projectPath = /databases/$(database)/documents/projects/$(projectId);
      // Ensure projectData and its members field are not null and members is a list before accessing
      return exists(projectPath) &&
             get(projectPath).data != null && // Ensure project data exists
             (
               request.auth.uid == get(projectPath).data.ownerId ||
               (
                 get(projectPath).data.members != null &&
                 get(projectPath).data.members is list &&
                 request.auth.uid in get(projectPath).data.members
               )
             );
    }

    match /users/{userId} {
      // ANY authenticated user can create their OWN user document, ensuring the doc ID matches their UID
      allow create: if request.auth != null && request.resource.data.id == request.auth.uid;

      // Admin can read any user document.
      // ANY authenticated user can read ANY user document.
      // The application logic should handle displaying only relevant profiles (e.g., project members).
      allow read: if request.auth != null;

      // Admin can update any user document.
      // A user can update their OWN user document (specific fields like name, avatarUrl, avatarStoragePath).
      // Ensure that isAdmin field cannot be changed by non-admins.
      allow update: if isAdmin() ||
                       (request.auth.uid == userId &&
                        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['name', 'avatarUrl', 'avatarStoragePath']) &&
                        // Prevent self-promotion to admin or demotion by self
                        (
                          (request.resource.data.keys().has('isAdmin') && resource.data.keys().has('isAdmin') && request.resource.data.isAdmin == resource.data.isAdmin) ||
                          !request.resource.data.keys().has('isAdmin') // isAdmin field is not being changed
                        )
                       );

      // Admin can delete any user document. (Be cautious with this rule in production)
      allow delete: if isAdmin();

      // Admin can list all users. Other users cannot list all users directly.
      allow list: if isAdmin();
    }

    match /projects/{projectId} {
      // ANY authenticated user can create a project.
      // The creator (request.auth.uid) MUST be the ownerId and a member.
      // Required fields: name, ownerId, members, status, createdAt, updatedAt, lastActivity.
      allow create: if request.auth != null &&
                       request.resource.data.ownerId == request.auth.uid &&
                       request.auth.uid in request.resource.data.members &&
                       request.resource.data.name is string && request.resource.data.name.size() > 0 &&
                       request.resource.data.status is string &&
                       request.resource.data.createdAt == request.time &&
                       request.resource.data.updatedAt == request.time &&
                       request.resource.data.lastActivity == request.time;

      // Admin can read any project.
      // A user can read a project if they are an owner or a member.
      allow read: if isAdmin() || isProjectParticipant(projectId);

      // Update rules for projects
      allow update: if request.auth != null && (
                        // Admin can update anything (except ownerId and createdAt for safety, can be adjusted)
                        isAdmin() ||
                        // Owner can update fields, but not change ownerId or createdAt
                        (
                          request.auth.uid == resource.data.ownerId &&
                          request.resource.data.updatedAt == request.time &&
                          (!request.resource.data.keys().has('ownerId') || request.resource.data.ownerId == resource.data.ownerId) &&
                          (!request.resource.data.keys().has('createdAt') || request.resource.data.createdAt == resource.data.createdAt)
                        ) ||
                        // Project participant can ONLY update expense tracking fields and their own presence in members array if invited (handled on register)
                        (
                          isProjectParticipant(projectId) &&
                          request.resource.data.updatedAt == request.time &&
                          request.resource.data.lastActivity == request.time &&
                          // Ensure that NO OTHER critical fields are being changed by the participant
                          // This rule allows totalExpenses and recentExpenses to be modified by participants implicitly.
                          !request.resource.data.keys().hasAny(['name', 'description', 'status', 'budget', 'ownerId', 'createdAt', 'tags', 'notes']) &&
                           // If members array is being changed, it must be to add the current user (for invitation acceptance)
                           // or must be identical to the existing members array (no change by participant)
                          (
                            (request.resource.data.keys().has('members') && request.resource.data.members == resource.data.members.concat([request.auth.uid]) && !(request.auth.uid in resource.data.members)) ||
                            (!request.resource.data.keys().has('members') || request.resource.data.members == resource.data.members)
                          )
                        )
                      );


      // Admin can delete any project.
      // The project owner can delete the project.
      allow delete: if isAdmin() || (request.auth.uid == resource.data.ownerId);

      // Authenticated users can list projects. Client-side queries must filter appropriately.
      allow list: if request.auth != null;
    }

    match /expenses/{expenseId} {
      // User can create an expense if they are a participant of the linked project.
      // Required fields: amount, currency, projectId, paidById, expenseDate, createdBy, createdAt.
      allow create: if request.auth != null &&
                       isProjectParticipant(request.resource.data.projectId) &&
                       request.resource.data.amount is number &&
                       request.resource.data.currency is string &&
                       request.resource.data.projectId is string &&
                       request.resource.data.paidById is string &&
                       request.resource.data.expenseDate is timestamp &&
                       request.resource.data.createdBy == request.auth.uid &&
                       request.resource.data.createdAt == request.time &&
                       request.resource.data.updatedAt == request.time;


      // Admin can read any expense.
      // A user can read an expense if they are a participant of the linked project.
      allow read: if isAdmin() || isProjectParticipant(resource.data.projectId);

      // Admin can update any expense.
      // A user can update an expense if they created it AND are a participant of the linked project.
      // Ensure updatedAt is set.
      allow update: if request.auth != null &&
                       isProjectParticipant(resource.data.projectId) && // Must be participant
                       (
                         isAdmin() ||
                         (request.auth.uid == resource.data.createdBy) // Or creator
                       ) &&
                       request.resource.data.updatedAt == request.time;


      // Admin can delete any expense.
      // A user can delete an expense if they created it AND are a participant of the linked project.
      allow delete: if isAdmin() || (isProjectParticipant(resource.data.projectId) && request.auth.uid == resource.data.createdBy);

      // Authenticated users can list expenses. Client-side queries must filter.
      allow list: if request.auth != null;
    }
  }
}

    