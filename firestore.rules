
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Function to check if the user is an admin
    function isAdmin() {
      return request.auth.token.email == 'hugues.rabier@gmail.com';
    }

    // Function to check if the user is the owner of a project
    function isProjectOwner(projectId) {
      return request.auth.uid == get(/databases/$(database)/documents/projects/$(projectId)).data.ownerId;
    }

    // Function to check if the user is a member of a project
    function isProjectMember(projectId) {
      return request.auth.uid in get(/databases/$(database)/documents/projects/$(projectId)).data.members;
    }

    // Function to check if the user is either owner or member of a project
    function isProjectParticipant(projectId) {
      let projectData = get(/databases/$(database)/documents/projects/$(projectId)).data;
      return request.auth.uid == projectData.ownerId || request.auth.uid in projectData.members;
    }

    // Users collection
    match /users/{userId} {
      // Any authenticated user can create their own user document (profile)
      allow create: if request.auth != null && request.auth.uid == userId;
      // Any authenticated user can read any user profile (for selecting members, etc.)
      // Admin can read any user profile
      allow get: if request.auth != null || isAdmin();
      // A user can update their own profile (specific fields, TBD by your app logic)
      // Admin can update any user profile
      allow update: if (request.auth.uid == userId && (
                      request.resource.data.keys().hasOnly(['name', 'avatarUrl', 'preferences']) // Example updatable fields
                    )) || isAdmin();
      // Only admin can delete users (be cautious with this)
      allow delete: if isAdmin();
    }

    // Projects collection
    match /projects/{projectId} {
      // Any authenticated user can create a project
      allow create: if request.auth != null
                      && request.resource.data.ownerId == request.auth.uid // Creator is owner
                      && request.resource.data.members.hasAny([request.auth.uid]) // Creator is a member
                      && request.resource.data.name is string
                      && request.resource.data.name.size() > 0
                      && request.resource.data.createdAt == request.time // Enforce server timestamp
                      && request.resource.data.updatedAt == request.time;

      // A user can read a project if they are a participant or an admin
      allow get: if request.auth != null && (isProjectParticipant(projectId) || isAdmin());
      // A user can list projects if they are authenticated (client-side queries must filter by membership/ownership)
      allow list: if request.auth != null || isAdmin();

      // Only the project owner or admin can update project details
      // Members can be added/removed by the owner or admin
      allow update: if request.auth != null && (isProjectOwner(projectId) || isAdmin())
                      // Ensure ownerId is not changed by non-admins
                      && (isAdmin() || request.resource.data.ownerId == resource.data.ownerId)
                      // Validate that 'members' only contains valid UIDs if modified
                      // && (request.resource.data.members.diff(resource.data.members).added.size() > 0 || request.resource.data.members.diff(resource.data.members).removed.size() > 0 ?
                      //      request.resource.data.members.size() > 0 && request.resource.data.members.hasOnly(get(/databases/$(database)/documents/users).keys()) : true) // More complex rule if checking against 'users' collection
                      && request.resource.data.updatedAt == request.time; // Enforce server timestamp

      // Only the project owner or admin can delete a project
      allow delete: if request.auth != null && (isProjectOwner(projectId) || isAdmin());
    }

    // Expenses collection
    match /expenses/{expenseId} {
      // An authenticated user who is part of the project can create an expense for that project
      allow create: if request.auth != null
                      && isProjectParticipant(request.resource.data.projectId)
                      && request.resource.data.paidById == request.auth.uid // Usually the payer is the creator
                      && request.resource.data.amount is number
                      // && request.resource.data.amount > 0 // Optional: if amount must be positive
                      && request.resource.data.createdAt == request.time;

      // An authenticated user can read an expense if they are part of the project or an admin
      allow get: if request.auth != null && (isProjectParticipant(resource.data.projectId) || isAdmin());
      // For listing, rely on client-side queries + the 'get' rule above for security
      allow list: if request.auth != null || isAdmin();

      // An authenticated user can update an expense if they are part of the project (or created it) or an admin
      // More specific logic might be needed (e.g., only payer or project owner can edit certain fields)
      allow update: if request.auth != null && (isProjectParticipant(resource.data.projectId) || isAdmin());
                      // && request.resource.data.paidById == resource.data.paidById // Prevent changing who paid unless admin

      // An authenticated user can delete an expense if they are part of the project or an admin
      // More specific logic might be needed (e.g., only payer or project owner can delete)
      allow delete: if request.auth != null && (isProjectParticipant(resource.data.projectId) || isAdmin());
    }
  }
}
