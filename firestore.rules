
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is an admin
    function isAdmin() {
      return request.auth.token.email == 'hugues.rabier@gmail.com';
    }

    // Helper function to check if the user is a participant (member or owner) of a project
    // Ensures projectData and members list exist before checking.
    function isProjectParticipant(projectId) {
      let projectPath = /databases/$(database)/documents/projects/$(projectId);
      return exists(projectPath) &&
             get(projectPath).data != null && // Ensure document data exists
             (
               request.auth.uid == get(projectPath).data.ownerId ||
               (get(projectPath).data.members != null && get(projectPath).data.members is list && request.auth.uid in get(projectPath).data.members)
             );
    }

    match /users/{userId} {
      // ANY authenticated user can create their OWN user document, ensuring the doc ID matches their UID
      allow create: if request.auth != null && request.resource.data.id == request.auth.uid;

      // ANY authenticated user can read ANY user document.
      // The application logic should handle displaying only relevant profiles (e.g., project members).
      allow read: if request.auth != null;

      // Admin can update any user document.
      // A user can update their OWN user document for specific fields.
      // Prevent self-promotion to admin.
      allow update: if request.auth != null && (
                       isAdmin() ||
                       (request.auth.uid == userId &&
                        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['name', 'avatarUrl', 'avatarStoragePath']) &&
                        // Prevent non-admins from changing isAdmin field to true
                        (request.resource.data.keys().has('isAdmin') == false || request.resource.data.isAdmin == resource.data.isAdmin || request.resource.data.isAdmin == false)
                       )
                     );

      // Admin can delete any user document. (Be cautious: only deletes Firestore doc, not Auth user)
      allow delete: if isAdmin();

      // Admin can list all users. Other authenticated users can only list if they are reading their own data (effectively no list for non-admins)
      allow list: if isAdmin();
    }

    match /projects/{projectId} {
      // ANY authenticated user can create a project.
      // The creator (request.auth.uid) MUST be the ownerId and a member.
      // Required fields: name, ownerId, members, status, createdAt, updatedAt, lastActivity.
      allow create: if request.auth != null &&
                       request.resource.data.ownerId == request.auth.uid &&
                       request.auth.uid in request.resource.data.members &&
                       request.resource.data.name is string && request.resource.data.name.size() > 0 &&
                       request.resource.data.status is string &&
                       request.resource.data.createdAt == request.time &&
                       request.resource.data.updatedAt == request.time &&
                       request.resource.data.lastActivity == request.time;

      // Admin can read any project.
      // A user can read a project if they are an owner or a member.
      allow read: if request.auth != null && (isAdmin() || isProjectParticipant(projectId));

      // Admin can update any project.
      // Owner can update most fields.
      // Invited user can add themselves to members.
      // Project participants can update expense-tracking fields.
      allow update: if request.auth != null && (
        // Admin can update anything
        isAdmin() ||
        // Owner can update almost anything (except ownerId and createdAt)
        (
          request.auth.uid == resource.data.ownerId &&
          request.resource.data.updatedAt == request.time &&
          (!request.resource.data.keys().has('ownerId') || request.resource.data.ownerId == resource.data.ownerId) &&
          (!request.resource.data.keys().has('createdAt') || request.resource.data.createdAt == resource.data.createdAt)
        ) ||
        // Authenticated user (invited via client-side logic) can add themselves to the members array
        (
          request.resource.data.keys().hasOnly(['members', 'updatedAt']) && // Only these fields are being modified
          request.resource.data.updatedAt == request.time &&
          !(request.auth.uid in resource.data.members) && // User is not already a member
          // Check if the new members array is the old one plus ONLY the current user's UID
          // This is a common pattern for arrayUnion-like behavior in rules for a single addition
          request.resource.data.members.size() == resource.data.members.size() + 1 &&
          request.resource.data.members[request.resource.data.members.size() - 1] == request.auth.uid &&
          resource.data.members.hasAll(request.resource.data.members.removeAll([request.auth.uid])) // ensure no other members were removed
        ) ||
        // Project participant can ONLY update expense tracking fields if they are not the owner
        (
          isProjectParticipant(projectId) &&
          request.auth.uid != resource.data.ownerId && // Not the owner
          request.resource.data.updatedAt == request.time &&
          request.resource.data.lastActivity == request.time &&
          // Ensure that NO OTHER critical fields are being changed by the participant
          !request.resource.data.keys().hasAny(['name', 'description', 'status', 'budget', 'ownerId', 'createdAt', 'members', 'tags', 'notes'])
        )
      );

      // Admin can delete any project.
      // The project owner can delete the project.
      allow delete: if request.auth != null && (isAdmin() || (request.auth.uid == resource.data.ownerId));

      allow list: if request.auth != null;
    }

    match /expenses/{expenseId} {
      // User can create an expense if they are a participant of the linked project.
      // Required fields are checked.
      allow create: if request.auth != null &&
                       isProjectParticipant(request.resource.data.projectId) &&
                       request.resource.data.amount is number &&
                       request.resource.data.currency is string &&
                       request.resource.data.projectId is string &&
                       request.resource.data.paidById is string &&
                       request.resource.data.expenseDate is timestamp &&
                       request.resource.data.createdBy == request.auth.uid &&
                       request.resource.data.createdAt == request.time &&
                       request.resource.data.updatedAt == request.time;

      // Admin can read any expense.
      // A user can read an expense if they are a participant of the linked project.
      allow read: if request.auth != null && (isAdmin() || isProjectParticipant(resource.data.projectId));

      // Admin can update any expense.
      // A user can update an expense if they created it AND are a participant of the linked project.
      allow update: if request.auth != null && (isAdmin() || (isProjectParticipant(resource.data.projectId) && request.auth.uid == resource.data.createdBy));

      // Admin can delete any expense.
      // A user can delete an expense if they created it AND are a participant of the linked project.
      allow delete: if request.auth != null && (isAdmin() || (isProjectParticipant(resource.data.projectId) && request.auth.uid == resource.data.createdBy));

      allow list: if request.auth != null;
    }
  }
}

    